@startuml Tree_Editor_Extension_code
hide empty members
hide circle

class extension {
  + activate()
}

note right of extension : Entry point

package "tree-language-server" {
  class TreeLanguageServerRpcClient

  class "start-server" as startServer

  class serverCommands {
    + registerServerCommands()
  }

  class "start-server" as startServer {
    + startJsonRpcServer()
  }

  note left of startServer::startJsonRpcServer
    This starts the
    Tree Language Server jar.
  end note


  class TreeLanguageServerClient {
    + initialize(params)
    + shutdown()
    + exit()
    + ping()
    + getModel(ModelRequest)
    + getDetectedodelUris()
  }

  class VscodeJsonRPCServer {
    ~ addMessageHandlers()
  }

  startServer --> VscodeJsonRPCServer : create >
  TreeLanguageServerClient <|- TreeLanguageServerRpcClient  : implements <
  TreeLanguageServerRpcClient -[hidden]u- startServer
  VscodeJsonRPCServer -[hidden]u- TreeLanguageServerRpcClient
}

package "ecore-custom-editor" {
  class registerCustomTreeEditor

  class TreeCustomDocument {
    + uri: Uri
    + documentData : TreeDocumentModel
  }

  class CustomTreeEditorProvider {
    + saveCustomDocument(TreeCustomDocument)
    + openCustomDocument(Uri) : TreeCustomDocument
    + resolveCustomEditor(TreeCustomDocument, WebviewPanel)
    - createWebviewHtml(): string
  }

  note left of CustomTreeEditorProvider::createWebviewHtml
    This loads the Tree editor frontend Vue app.
  end note

  frame "RPC proxy for the webview" {
    class TreeEditorWebviewClient {
      + setDocument(TreeDocument)
    }

    class VscodeExtensionServer {
      + signalReady()
      + triggerAction(ActionEvent)
      + setNodeChildrenVisibility(NodeId, boolean visible)
    }
  }

  CustomTreeEditorProvider --> TreeCustomDocument : creates >
  registerCustomTreeEditor --> CustomTreeEditorProvider
}

package nodejs #DDDDDD {
  class "child_process" as childProcess
}

package vscode #DDDDDD {
  interface CustomEditorProvider
  class WebviewPanel
  class Webview

  WebviewPanel . Webview
}

package vscode-jsonrpc as vscodeJsonrpc #DDDDDD {
  class MessageConnection
}


extension::activate --> serverCommands::registerServerCommands
extension::activate --> registerCustomTreeEditor
extension::activate --> TreeLanguageServerRpcClient : create >
extension::activate --> startServer : start server >

VscodeJsonRPCServer o-> MessageConnection : listen for message >
TreeLanguageServerRpcClient o--> MessageConnection : send message >

CustomTreeEditorProvider --|> CustomEditorProvider
CustomTreeEditorProvider o--> TreeLanguageServerClient

CustomTreeEditorProvider::resolveCustomEditor -> WebviewPanel : creates webview for >

TreeEditorWebviewClient --> Webview : send message >
VscodeExtensionServer --> Webview : listen to message >

TreeCustomDocument --> TreeLanguageServerClient

startServer --> childProcess : spawn child process >

vscode -[hidden]- "tree-language-server"

@enduml