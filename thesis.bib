
@inproceedings{akessonJatteTunableTree2017,
  title = {Jatte: A Tunable Tree Editor for Integrated {{DSLs}}},
  shorttitle = {Jatte},
  booktitle = {Proceedings of the 2nd {{ACM SIGPLAN International Workshop}} on {{Comprehension}} of {{Complex Systems}}},
  author = {Åkesson, Alfred and Hedin, Görel},
  date = {2017-10-23},
  pages = {7--12},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3141842.3141844},
  url = {https://doi.org/10.1145/3141842.3141844},
  urldate = {2021-02-03},
  abstract = {Complex systems often integrate domain-specific languages to let users customize the behavior. Developing tooling for such languages is typically time-consuming and error-prone. We present Jatte, a tool intended to simplify this development. Jatte works as a generic tree editor for an abstract syntax, but uses aspects and attribute grammars to support powerful modular ways of tuning both the projected view and the editing commands. We present the key features of Jatte, and discuss its application in an orchestration language for internet of things.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\522U2CHK\\Åkesson and Hedin - 2017 - Jatte a tunable tree editor for integrated DSLs.pdf},
  isbn = {978-1-4503-5521-6},
  keywords = {attribute grammars,Domain-specific languages,dsl,projectional editing,tree editor},
  series = {{{CoCoS}} 2017}
}

@book{alanhevnerDesignResearchInformation2010,
  title = {Design {{Research}} in {{Information Systems}}},
  author = {{Alan Hevner} and {Samir Chatterjee}},
  date = {2010},
  volume = {22},
  publisher = {{Springer, Boston, MA}},
  url = {https://doi.org/10.1007/978-1-4419-5653-8},
  isbn = {978-1-4419-5653-8},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@online{antonkosyakovCodeOrganization2019,
  title = {Code {{Organization}}},
  author = {{Anton Kosyakov} and {Sven Efftinge}},
  date = {2019-05-02},
  url = {https://github.com/eclipse-theia/theia/wiki/Code-Organization},
  urldate = {2020-12-06},
  abstract = {The code is fully implemented in TypeScript. Within the top level folders, that indicate what the contained code is about},
  file = {C\:\\Users\\krire\\Zotero\\storage\\L8ELDWJP\\Code-Organization.html},
  keywords = {architecture,organization,theia},
  langid = {english},
  organization = {{GitHub}}
}

@online{antonkosyakovImplementingJSONRPCProtocol2017,
  title = {Implementing a {{JSON}}-{{RPC}} Protocol with {{Eclipse LSP4J}} | {{The Eclipse Foundation}}},
  author = {{Anton Kosyakov}},
  date = {2017-05},
  url = {https://www.eclipse.org/community/eclipse_newsletter/2017/may/article2.php},
  urldate = {2021-04-22},
  abstract = {Get a introduction to the core concepts of Eclipse LSP4J and learn how to implement a JSON-RPC protocol.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\NXA864VE\\article2.html},
  keywords = {eclipse,json-rpc,lsp},
  langid = {english},
  organization = {{Eclipse Foundation}}
}

@software{awadBenawadVscodestories2020,
  title = {Benawad/Vscode-Stories},
  author = {Awad, Ben},
  date = {2020-10-31T15:50:43Z},
  origdate = {2020-10-29T23:32:51Z},
  url = {https://github.com/benawad/vscode-stories},
  urldate = {2020-10-31},
  abstract = {Stories for VSCode. Contribute to benawad/vscode-stories development by creating an account on GitHub.},
  keywords = {example,extension,stories,vscode},
  version = {334e1d7}
}

@inproceedings{beckmannEfficientEditingTreeoriented2020,
  title = {Efficient Editing in a Tree-Oriented Projectional Editor},
  booktitle = {Conference {{Companion}} of the 4th {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Beckmann, Tom},
  date = {2020-03-23},
  pages = {215--216},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3397537.3398477},
  url = {https://doi.org/10.1145/3397537.3398477},
  urldate = {2021-02-03},
  abstract = {In contrast to text editors, using projectional editors typically requires users to learn a new editing metaphor. In text-oriented projectional editors, rules may be used to give users the impression of working in a regular text editor. As such, the editing metaphor appears clear to the user, but if the implemented rules do not suffice, users may be confused why certain actions do not work. Block-oriented projectional editors, where the editing metaphors are typically clearer, often present challenges in editing efficiency, as code takes up more space and editing is perceived to be slower. We present a block-oriented projectional editor that tries to address the issues of editing efficiency and space usage. Through a reusable set of commands for tree modifications, a space-efficient AST visualization, and context-aware input we allow users to edit as fast or faster than in a text editor. We provide a first evaluation by comparing the number of keystrokes required to carry out common edit operations.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\E2NB4HTD\\Beckmann - 2020 - Efficient editing in a tree-oriented projectional .pdf},
  isbn = {978-1-4503-7507-8},
  keywords = {Editing Efficiency,Modal Editing,Projectional Editing},
  series = {\&lt;{{Programming}}\&gt; '20}
}

@inproceedings{beckmannVisualDesignTreeoriented2020,
  title = {Visual Design for a Tree-Oriented Projectional Editor},
  booktitle = {Conference {{Companion}} of the 4th {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Beckmann, Tom and Ramson, Stefan and Rein, Patrick and Hirschfeld, Robert},
  date = {2020-03-23},
  pages = {113--119},
  publisher = {{ACM}},
  location = {{Porto Portugal}},
  doi = {10.1145/3397537.3397560},
  url = {https://dl.acm.org/doi/10.1145/3397537.3397560},
  urldate = {2020-11-14},
  abstract = {Projectional editors show promise for a variety of use cases, for example in language composition and domain specific projections. To allow efficient interactions within a projectional editor, it is necessary for the editor to clearly communicate the structure of the program to the user, such that it is clear what editing operations are supported for a given element. Making the abstract syntax tree visible within the editor may provide this clarity, however, it generally also results in considerably increased space usage, potentially also impacting usability. We present an early prototype of a tree-oriented projectional editor for Squeak/Smalltalk that tries to minimize space usage while retaining a clear visualization of the tree structure, balancing the two problems. We describe and discuss our design prototype and do a preliminary evaluation through individual account of experience working with the editor on various projects.},
  eventtitle = {{$<$}{{Programming}}{$>$} '20: 4th {{International Conference}} on the {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  file = {C\:\\Users\\krire\\Zotero\\storage\\74M3GAA6\\Beckmann et al. - 2020 - Visual design for a tree-oriented projectional edi.pdf},
  isbn = {978-1-4503-7507-8},
  keywords = {smalltalk,tree editor},
  langid = {english}
}

@inproceedings{beckmannVisualDesignTreeoriented2020a,
  title = {Visual Design for a Tree-Oriented Projectional Editor},
  booktitle = {Conference {{Companion}} of the 4th {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Beckmann, Tom and Ramson, Stefan and Rein, Patrick and Hirschfeld, Robert},
  date = {2020-03-23},
  pages = {113--119},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3397537.3397560},
  url = {https://doi.org/10.1145/3397537.3397560},
  urldate = {2021-02-03},
  abstract = {Projectional editors show promise for a variety of use cases, for example in language composition and domain specific projections. To allow efficient interactions within a projectional editor, it is necessary for the editor to clearly communicate the structure of the program to the user, such that it is clear what editing operations are supported for a given element. Making the abstract syntax tree visible within the editor may provide this clarity, however, it generally also results in considerably increased space usage, potentially also impacting usability. We present an early prototype of a tree-oriented projectional editor for Squeak/Smalltalk that tries to minimize space usage while retaining a clear visualization of the tree structure, balancing the two problems. We describe and discuss our design prototype and do a preliminary evaluation through individual account of experience working with the editor on various projects.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\UI2HQRVD\\Beckmann et al. - 2020 - Visual design for a tree-oriented projectional edi.pdf},
  isbn = {978-1-4503-7507-8},
  keywords = {design,projectional editing,Squeak/Smalltalk,tree editor,ui,visual programming language},
  series = {\&lt;{{Programming}}\&gt; '20}
}

@inreference{benjaminpaseroSourceCodeOrganization2020,
  title = {Source {{Code Organization}}},
  booktitle = {Visual {{Studio Code Wiki}}},
  author = {{Benjamin Pasero} and Van Liew, Greg},
  date = {2020-10-05T08:08:48Z},
  origdate = {2015-09-03T20:23:38Z},
  edition = {1f6491a},
  publisher = {{Microsoft}},
  url = {https://github.com/microsoft/vscode/wiki/Source-Code-Organization},
  urldate = {2020-10-05},
  abstract = {Visual Studio Code consists of a layered and modular core (found as src/vs) that can be extended using extensions. Extensions are run in a separate process referred to as the extension host. Extensions are implemented by utilizing the extension API.},
  keywords = {editor,electron,microsoft,typescript,visual-studio-code}
}

@inproceedings{borkFrameworkTeachingConceptual2019,
  title = {A {{Framework}} for {{Teaching Conceptual Modeling}} and {{Metamodeling Based}} on {{Bloom}}’s {{Revised Taxonomy}} of {{Educational Objectives}}},
  author = {Bork, Dominik},
  date = {2019-01-08},
  doi = {10.24251/HICSS.2019.928},
  url = {http://scholarspace.manoa.hawaii.edu/handle/10125/60208},
  urldate = {2020-11-18},
  abstract = {Conceptual modeling and metamodeling are vital parts in computer and information science study programs at tertiary institutions. Currently, teachers are struggling in ensuring that their teaching approach is comprehensive and in identifying application domains that motivate students, and show that the value of models exceeds pure representative means. This paper uses Bloom’s revised taxonomy of educational objectives as a foundation to define a framework for comprehensive teaching of conceptual modeling and metamodeling. The introduced framework is used to evaluate the comprehensiveness of a Smart City teaching case which has been taught at the Next-generation Enterprise: Modeling in the Digital Age Summer School. The contribution of this paper is threefold: First, a generic framework for comprehensive teaching of conceptual modeling and metamodeling is proposed; Second, a Smart City teaching case is reported; Third, the evaluation of the teaching case leads to a discussion on how to improve teaching of conceptual modeling and metamodeling in the future.},
  annotation = {Accepted: 2019-01-03T01:03:54Z},
  file = {C\:\\Users\\krire\\Zotero\\storage\\HYFRSU68\\Bork - 2019 - A Framework for Teaching Conceptual Modeling and M.pdf;C\:\\Users\\krire\\Zotero\\storage\\WUU3JL2H\\60208.html},
  isbn = {978-0-9981331-2-6},
  keywords = {adoption,education},
  langid = {english}
}

@inproceedings{boronatCodeFirstModelDrivenEngineering2019,
  title = {Code-{{First Model}}-{{Driven Engineering}}: {{On}} the {{Agile Adoption}} of {{MDE Tooling}}},
  shorttitle = {Code-{{First Model}}-{{Driven Engineering}}},
  booktitle = {2019 34th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  author = {Boronat, A.},
  date = {2019-11},
  pages = {874--886},
  issn = {2643-1572},
  doi = {10.1109/ASE.2019.00086},
  abstract = {Domain models are the most important asset in widely accepted software development approaches, like Domain-Driven Design (DDD), yet those models are still implicitly represented in programs. Model-Driven Engineering (MDE) regards those models as representable entities that are amenable to automated analysis and processing, facilitating quality assurance while increasing productivity in software development processes. Although this connection is not new, very few approaches facilitate adoption of MDE tooling without compromising existing value, their data. Moreover, switching to MDE tooling usually involves re-engineering core parts of an application, hindering backward compatibility and, thereby, continuous integration, while requiring an up-front investment in training in specialized modeling frameworks. In those approaches that overcome the previous problem, there is no clear indication - from a quantitative point of view - of the extent to which adopting state-of-the-art MDE practices and tooling is feasible or advantageous. In this work, we advocate a code-first approach to modeling through an approach for applying MDE techniques and tools to existing object-oriented software applications that fully preserves the semantics of the original application, which need not be modified. Our approach consists both of a semi-automated method for specifying explicit view models out of existing object-oriented applications and of a conservative extension mechanism that enables the use of such view models at run time, where view model queries are resolved on demand and view model updates are propagated incrementally to the original application. This mechanism enables an iterative, flexible application of MDE tooling to software applications, where metamodels and models do not exist explicitly. An evaluation of this extension mechanism, implemented for Java applications and for view models atop the Eclipse Modeling Framework (EMF), has been conducted with an industry-targeted benchmark for decision support systems, analyzing performance and scalability of the synchronization mechanism. Backward propagation of large updates over very large views is instant.},
  eventtitle = {2019 34th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  file = {C\:\\Users\\krire\\Zotero\\storage\\ARNKYVB5\\Boronat - 2019 - Code-First Model-Driven Engineering On the Agile .pdf},
  keywords = {agile adoption,automated analysis,Biological system modeling,code-first model-driven engineering,decision support systems,domain model; MDE; EMF; roundtrip synchronization; algebraic specification; performance analysis,domain-driven design,eclipse modeling framework,EMF,explicit view models,Java,MDE tooling,model queries,Object oriented modeling,object-oriented programming,object-oriented software applications,re-engineering core parts,Software,software architecture,software development approaches,software development processes,software quality,Synchronization,Tools,Unified modeling language}
}

@book{brambillaModelDrivenSoftwareEngineering2017,
  title = {Model-{{Driven Software Engineering}} in {{Practice}}: {{Second Edition}}},
  shorttitle = {Model-{{Driven Software Engineering}} in {{Practice}}},
  author = {Brambilla, Marco and Cabot, Jordi and Wimmer, Manuel},
  date = {2017},
  edition = {2},
  publisher = {{Morgan \& Claypool Publishers}},
  abstract = {This book discusses how model-based approaches can improve the daily practice of software professionals. This is known as Model-Driven Software Engineering (MDSE) or, simply, Model-Driven Engineering (MDE). MDSE practices have proved to increase efficiency and effectiveness in software development, as demonstrated by various quantitative and qualitative studies. MDSE adoption in the software industry is foreseen to grow exponentially in the near future, e.g., due to the convergence of software development and business analysis. The aim of this book is to provide you with an agile and flexible tool to introduce you to the MDSE world, thus allowing you to quickly understand its basic principles and techniques and to choose the right set of MDSE instruments for your needs so that you can start to benefit from MDSE right away. The book is organized into two main parts. The first part discusses the foundations of MDSE in terms of basic concepts (i.e., models and transformations), driving principles, application scenarios, and current standards, like the well-known MDA initiative proposed by OMG (Object Management Group) as well as the practices on how to integrate MDSE in existing development processes. The second part deals with the technical aspects of MDSE, spanning from the basics on when and how to build a domain-specific modeling language, to the description of Model-to-Text and Model-to-Model transformations, and the tools that support the management of MDSE projects. The second edition of the book features: a set of completely new topics, including: full example of the creation of a new modeling language (IFML), discussion of modeling issues and approaches in specific domains, like business process modeling, user interaction modeling, and enterprise architecture complete revision of examples, figures, and text, for improving readability, understandability, and coherence better formulation of definitions, dependencies between concepts and ideas addition of a complete index of book content In addition to the contents of the book, more resources are provided on the book's website http://www.mdse-book.com, including the examples presented in the book.},
  isbn = {978-1-62705-708-0},
  keywords = {adoption,mdse},
  pagetotal = {208}
}

@inproceedings{bruneliereCombiningModelDrivenEngineering2010,
  title = {Combining {{Model}}-{{Driven Engineering}} and {{Cloud Computing}}},
  booktitle = {Modeling, {{Design}}, and {{Analysis}} for the {{Service Cloud}} - {{MDA4ServiceCloud}}'10: {{Workshop}}'s 4th Edition (Co-Located with the 6th {{European Conference}} on {{Modelling Foundations}} and {{Applications}} - {{ECMFA}} 2010)},
  author = {Bruneliere, Hugo and Cabot, Jordi and Jouault, Frédéric},
  date = {2010-06},
  location = {{Paris, France}},
  url = {https://hal.archives-ouvertes.fr/hal-00539168},
  urldate = {2020-11-26},
  abstract = {Service-orientation and model-driven engineering are two of the most dominant software engineering paradigms nowadays. This position paper explores the synergies between them and show how they can benefit from each other. In particular, the paper introduces the notion of Modeling as a Service (MaaS) as a way to provide modeling and model-driven engineering services from the cloud.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\CXLI8W3Z\\Bruneliere et al. - 2010 - Combining Model-Driven Engineering and Cloud Compu.pdf},
  keywords = {adoption,cloud,editor,maas,saas}
}

@article{buchmannConceptualModelingEducation2019,
  title = {Conceptual {{Modeling Education}} as a “{{Design Problem}}”},
  author = {Buchmann, Robert Andrei and Ghiran, Ana-Maria and Döller, Victoria and Karagiannis, Dimitris},
  date = {2019-12-30},
  journaltitle = {Complex Systems Informatics and Modeling Quarterly},
  volume = {0},
  pages = {21--33},
  issn = {2255-9922},
  doi = {10.7250/csimq.2019-21.02},
  url = {https://csimq-journals.rtu.lv/article/view/csimq.2019-21.02},
  urldate = {2020-11-18},
  abstract = {This article frames Conceptual Modeling education as a design problem, in the sense of the Design Science research framework, motivated by student preconceptions and oversimplifications causing a gap between how the discipline is perceived at the bachelor level and the holistic understanding of model value that is required for research work. The treatment to this design problem must comprise teaching approaches and artifacts capable of positioning Conceptual Modeling as a standalone discipline having a value proposition for any application domain, rather than a technique subordinated to other disciplines. The underpinning thesis is that modeling languages should be primarily understood as purposeful knowledge schemas that can be subjected to agile adaptations in support of model-driven systems or knowledge processes, by analogy to how a database schema is evolved in response to changing requirements of a data-driven system or data analytics needs. This thesis is supported by enablers provided by the Open Models Laboratory and the Agile Modeling Method Engineering framework – resources that support the development of treatments to the design problem framed by the article.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\C4UNEPP4\\Buchmann et al. - 2019 - Conceptual Modeling Education as a “Design Problem.pdf;C\:\\Users\\krire\\Zotero\\storage\\JMGKP332\\csimq.2019-21.html},
  issue = {21},
  keywords = {Agile Modeling Method Engineering,Conceptual Modeling Education,Design Science,OMiLAB,Teaching Artifacts},
  langid = {american},
  number = {21}
}

@software{camilleletavernierEclipseemfcloudEcoreglsp2020,
  title = {Eclipse-Emfcloud/Ecore-Glsp},
  author = {{Camille Letavernier} and {Simon Graband} and {Aaron R Miller} and {Nina Doschek}},
  date = {2020-09-23T18:56:50Z},
  origdate = {2020-06-03T14:19:56Z},
  url = {https://github.com/eclipse-emfcloud/ecore-glsp},
  urldate = {2020-09-29},
  abstract = {Ecore GLSP provides a web-based editor for Ecore Models (including Diagrams), integrated with Eclipse Theia. It contains two components: one GLSP language server (Server-side, written in Java), and one GLSP client extension to actually present the diagrams (Using Sprotty).},
  organization = {{eclipse-emfcloud}},
  version = {d104af3}
}

@incollection{carlssonDesignScienceResearch2010,
  title = {Design {{Science Research}} in {{Information Systems}}: {{A Critical Realist Approach}}},
  shorttitle = {Design {{Science Research}} in {{Information Systems}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Carlsson, Sven A.},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {209--233},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_15},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_15},
  urldate = {2021-02-16},
  abstract = {Information systems (IS) research has serious utilization and relevance problems. To increase IS research utilization and relevance, scholars argue that the dominating behavioral IS research paradigm should be complemented with IS design science research. The most influential IS design science research schools have a strong focus on the IT artifact, in most cases an exclusive focus on the IT artifact. The schools have very little discussions and clarifications regarding underpinning philosophies, but most seem to be based on positivism, traditional realism, or pragmatism. This chapter presents, as a complement to the most influential design science research schools, an alternative approach for IS design science research. The approach builds on the premise that one of the most critical aims of IS design science research is to develop practical knowledge for the design and realization of different classes of IS initiatives, where IS are viewed as socio-technical systems and not just IT artifacts. The underpinning philosophy of the approach is critical realism which has been developed as an alternative to positivism and traditional realism as well as to constructivism (relativism). The developed practical IS design knowledge can be represented in different forms, for example, as heuristic design propositions, design exemplars and patterns, models or frameworks, and stories or narratives. The IS design knowledge can be developed using different methods and techniques. The chapter presents how practical IS design knowledge can be developed as well as the nature of the developed knowledge.},
  isbn = {978-1-4419-5653-8},
  keywords = {Critical Realism,Design Knowledge,Design Theory,Information System,Knowledge Management System},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@inproceedings{carrascal-manzanaresBuildingMDECloud2015,
  title = {Building {{MDE}} Cloud Services with {{DISTIL}}},
  booktitle = {International {{Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}},
  author = {CARRASCAL-MANZANARES, Carlos and Cuadrado, Jesús Sánchez and de Lara, Juan},
  date = {2015-09},
  volume = {1563},
  pages = {19--24},
  location = {{Ottawa, Canada}},
  url = {https://hal.archives-ouvertes.fr/hal-01761670},
  urldate = {2020-11-26},
  abstract = {Model-Driven Engineering (MDE) techniques, like transformations, queries, and code generators, were devised for local, single-CPU architectures. However, the increasing complexity of the systems to be built and their high demands in terms of computation, memory and storage, requires more scalable and flexible MDE techniques, likely using services and the cloud. Nonetheless, the cost of developing MDE solutions on the cloud is high without proper automation mechanisms. In order to alleviate this situation, we present DISTIL, a domain-specific language to describe MDE services, which is able to generate (NoSQL-based) respositories for the artefacts of interest, and skeletons for (single or composite) services, ready to be deployed in Heroku. We illustrate the approach through the construction of a repository and a set of cloud-based services for bento reusable transformation components.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\IVFG6CB2\\hal-01761670.html},
  keywords = {Cloud Computing,Code Generation,Domain-Specific,Domain-Specific Languages,Index Terms-Model-Driven Engineering,Languages,Model-Driven Engineering,REST services,Service-Oriented Programming},
  series = {Model-{{Driven Engineering}} on and for the {{Cloud}}}
}

@online{cheincubatorVscodetheiacomparator,
  title = {Vscode-Theia-Comparator},
  author = {{Che Incubator}},
  url = {https://che-incubator.github.io/vscode-theia-comparator/status.html},
  urldate = {2020-10-05},
  annotation = {https://github.com/che-incubator/vscode-theia-comparator},
  file = {C\:\\Users\\krire\\Zotero\\storage\\D9Y6H6SP\\status.html},
  langid = {english},
  organization = {{vscode-theia-comparator}}
}

@inproceedings{coulonModularDistributedIDE2020,
  title = {Modular and Distributed {{IDE}}},
  booktitle = {Proceedings of the 13th {{ACM SIGPLAN International Conference}} on {{Software Language Engineering}}},
  author = {Coulon, Fabien and Auvolat, Alex and Combemale, Benoit and Bromberg, Yérom-David and Taïani, François and Barais, Olivier and Plouzeau, Noël},
  date = {2020-11-16},
  pages = {270--282},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3426425.3426947},
  url = {https://doi.org/10.1145/3426425.3426947},
  urldate = {2020-11-26},
  abstract = {Integrated Development Environments (IDEs) are indispensable companions to programming languages. They are increasingly turning towards Web-based infrastructure. The rise of a protocol such as the Language Server Protocol (LSP) that standardizes the separation between a language-agnostic IDE, and a language server that provides all language services (e.g., auto completion, compiler...) has allowed the emergence of high quality generic Web components to build the IDE part that runs in the browser. However, all language services require different computing capacities and response times to guarantee a user-friendly experience within the IDE. The monolithic distribution of all language services prevents to leverage on the available execution platforms (e.g., local platform, application server, cloud). In contrast with the current approaches that provide IDEs in the form of a monolithic client-server architecture, we explore in this paper the modularization of all language services to support their individual deployment and dynamic adaptation within an IDE. We evaluate the performance impact of the distribution of the language services across the available execution platforms on four EMF-based languages, and demonstrate the benefit of a custom distribution.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\44RUTF2B\\Coulon et al. - 2020 - Modular and distributed IDE.pdf},
  isbn = {978-1-4503-8176-5},
  keywords = {cloud,editor,Generative approach,IDE,Microservice,theia},
  series = {{{SLE}} 2020}
}

@online{CustomWebviewEditor,
  title = {Custom Webview Editor {{API}} · {{Issue}} \#77131 · Microsoft/Vscode},
  url = {https://github.com/microsoft/vscode/issues/77131},
  urldate = {2020-09-29},
  abstract = {Updated: April 24, 2020 The Custom Text Editor API has shipped with VS Code 1.44! Checkout the documentation and example extension to get started creating your custom text editors. If you encounter...},
  file = {C\:\\Users\\krire\\Zotero\\storage\\63QTC5CT\\77131.html},
  langid = {english},
  organization = {{GitHub}}
}

@article{dannenbergStructureEfficientUpdate1990,
  title = {A Structure for Efficient Update, Incremental Redisplay and Undo in Graphical Editors},
  author = {Dannenberg, Roger B.},
  date = {1990-02},
  journaltitle = {Software: Practice and Experience},
  shortjournal = {Softw: Pract. Exper.},
  volume = {20},
  pages = {109--132},
  issn = {00380644, 1097024X},
  doi = {10.1002/spe.4380200202},
  url = {http://doi.wiley.com/10.1002/spe.4380200202},
  urldate = {2020-11-14},
  abstract = {The design of a graphical editor requires a solution to a number of problems, including how to (1) support incremental redisplay, (2) control the granularity of display updates, (3) provide efficient access and modification to the underlying data structure, (4) handle multiple views of the same data and (5) support Undo operations. It is most important that these problems be solved without sacrificing program modularity. A new data structure, called an Iternlist, provides a solution to these problems. IternLists maintain both multiple views and multiple versions of data to simplify Undo operations and to support incremental display updates. The implementation of IternLists is described and the use of IternLists to create graphical editors is presented.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\JWIA898N\\Dannenberg - 1990 - A structure for efficient update, incremental redi.pdf},
  keywords = {data structure,undo},
  langid = {english},
  number = {2}
}

@online{dannyguoMakeREADME2020,
  title = {Make a {{README}}},
  author = {{Danny Guo} and {Haroen Viaene} and {David Kleuker} and {Eric Berry} and {Alex Falcon} and {"沈唁"}},
  date = {2020-08-20},
  url = {https://www.makeareadme.com},
  urldate = {2021-05-20},
  abstract = {Learn how to make a great README for your programming project, and use the editable template to get started.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\R5KAZRB5\\www.makeareadme.com.html},
  keywords = {guide,open source,readme},
  langid = {english},
  organization = {{Make a README}}
}

@unpublished{davidSiriusCon2018Sirius2018,
  title = {[{{SiriusCon}} 2018] {{Sirius Roadmap}}},
  author = {David, Pierre-Charles and {Obeo}},
  date = {2018-12-11},
  url = {https://www.slideshare.net/Obeo_corp/siriuscon-2018-sirius-roadmap},
  urldate = {2020-10-06},
  abstract = {SiriusCon 2018 - Talk by Pierre-Charles David, Obeo Sirius Roadmap {$<$}},
  keywords = {eclipse,sirius}
}

@online{dirkbaumerProgressSupportLSP2019,
  title = {Progress Support in {{LSP}} · {{Issue}} \#786 · Microsoft/Language-Server-Protocol},
  author = {{Dirk Bäumer}},
  date = {2019-07-03},
  url = {https://github.com/microsoft/language-server-protocol/issues/786},
  urldate = {2020-09-23},
  abstract = {There are two distinct requests in LSP that ask for progress: one to report work done progress on requests so that clients can show a progress monitor one to report partial results on requests that...},
  file = {C\:\\Users\\krire\\Zotero\\storage\\RYV4QNAM\\786.html},
  keywords = {LSP},
  langid = {english},
  organization = {{GitHub}}
}

@online{dumaisEclipseTheia2018,
  title = {Eclipse {{Theia}}},
  author = {Dumais, Marc},
  date = {2018-04-12T11:43:07-04:00},
  url = {https://projects.eclipse.org/proposals/eclipse-theia},
  urldate = {2020-11-26},
  file = {C\:\\Users\\krire\\Zotero\\storage\\IRXVF3F4\\eclipse-theia.html},
  langid = {english},
  organization = {{projects.eclipse.org}},
  type = {Text}
}

@software{EclipseEclipseJdt2021,
  title = {Eclipse/Eclipse.Jdt.Ls},
  date = {2021-03-06T04:46:36Z},
  origdate = {2016-06-27T13:06:53Z},
  url = {https://github.com/eclipse/eclipse.jdt.ls},
  urldate = {2021-03-08},
  abstract = {Java language server. Contribute to eclipse/eclipse.jdt.ls development by creating an account on GitHub.},
  keywords = {eclipse,java,jdt,language-server-protocol,lsp},
  organization = {{Eclipse Foundation}}
}

@software{EclipseemfcloudTheiatreeeditor2020,
  ids = {EclipseemfcloudTheiatreeeditor2020a,EclipseemfcloudTheiatreeeditor2020b},
  title = {Eclipse-Emfcloud/Theia-Tree-Editor},
  date = {2020-09-17T16:13:35Z},
  origdate = {2020-05-25T15:40:13Z},
  url = {https://github.com/eclipse-emfcloud/theia-tree-editor},
  urldate = {2020-09-29},
  abstract = {theia-tree-editor. Contribute to eclipse-emfcloud/theia-tree-editor development by creating an account on GitHub.},
  keywords = {emf,theia,tree},
  organization = {{eclipse-emfcloud}}
}

@online{eclipsefoundationEclipseCheNextGeneration,
  title = {Eclipse {{Che}} | {{Next}}-{{Generation Eclipse IDE}}, {{Cloud IDE}}, and {{Workspace Server}}},
  author = {{Eclipse Foundation}},
  url = {https://www.eclipse.org/che/technology/},
  urldate = {2020-12-05},
  file = {C\:\\Users\\krire\\Zotero\\storage\\YHVCDYZ9\\technology.html},
  keywords = {che}
}

@online{eclipsefoundationEclipseGLSP,
  title = {Eclipse {{GLSP}}},
  author = {{Eclipse Foundation}},
  url = {https://projects.eclipse.org/proposals/eclipse-glsp},
  urldate = {2020-09-29},
  file = {C\:\\Users\\krire\\Zotero\\storage\\SGU45Z74\\eclipse-glsp.html},
  keywords = {eclipse,glsp,lsp},
  langid = {english},
  organization = {{Eclipse GLSP}}
}

@online{eclipsefoundationEclipseglspGlspclient,
  title = {Eclipse-Glsp/Glsp-Client},
  shorttitle = {{{GLSP}} Client},
  author = {{Eclipse Foundation}},
  url = {https://github.com/eclipse-glsp/glsp-client},
  urldate = {2020-09-29},
  abstract = {Web-based client framework of the graphical language server platform - eclipse-glsp/glsp-client},
  file = {C\:\\Users\\krire\\Zotero\\storage\\YE2YX6J7\\protocol.html},
  keywords = {eclipse,glsp,lsp},
  langid = {english},
  organization = {{glsp-client - GitHub}}
}

@online{eclipsefoundationEclipseLayoutKernel,
  title = {Eclipse {{Layout Kernel}} ({{ELK}})},
  author = {{Eclipse Foundation}},
  url = {https://www.eclipse.org/elk/},
  urldate = {2020-12-06},
  file = {C\:\\Users\\krire\\Zotero\\storage\\VVD6PWEG\\elk.html},
  keywords = {diagram,elk,layout}
}

@online{eclipsefoundationEclipseSprotty,
  title = {Eclipse {{Sprotty}}},
  author = {{Eclipse Foundation}},
  url = {https://projects.eclipse.org/projects/ecd.sprotty/who},
  urldate = {2020-12-06},
  file = {C\:\\Users\\krire\\Zotero\\storage\\BSFG2TGB\\who.html},
  keywords = {library,sprotty},
  langid = {english},
  organization = {{projects.eclipse.org}},
  type = {Text}
}

@software{eclipsefoundationEclipseSprotty2020,
  title = {Eclipse/Sprotty},
  author = {{Eclipse Foundation}},
  date = {2020-12-06T07:29:16Z},
  origdate = {2018-08-16T09:15:44Z},
  url = {https://github.com/eclipse/sprotty},
  urldate = {2020-12-06},
  abstract = {A diagramming framework for the web. Contribute to eclipse/sprotty development by creating an account on GitHub.},
  keywords = {diagrams,eclipse,sprotty,svg,typescript,web},
  organization = {{Eclipse Foundation}},
  version = {ab42ddd}
}

@software{eclipsefoundationEclipsetheiaTheia2020,
  title = {Eclipse-Theia/Theia},
  author = {{Eclipse Foundation}},
  date = {2020-12-06T07:58:08Z},
  origdate = {2017-02-24T14:42:05Z},
  url = {https://github.com/eclipse-theia/theia},
  urldate = {2020-12-06},
  abstract = {Eclipse Theia is a cloud \& desktop IDE framework implemented in TypeScript.},
  keywords = {cloud-ide,code,editor,electron,github,ide,language-server-protocol,theia,typescript},
  organization = {{eclipse-theia}}
}

@software{eclipsefoundationEclipseXtext2020,
  title = {Eclipse/Xtext},
  author = {{Eclipse Foundation}},
  date = {2020-12-06T16:36:33Z},
  origdate = {2011-04-01T02:12:17Z},
  url = {https://github.com/eclipse/xtext},
  urldate = {2020-12-08},
  abstract = {Eclipse Xtext™ is a language development framework},
  keywords = {lsp,xtext},
  organization = {{Eclipse Foundation}}
}

@online{eclipsefoundationGLSP2020,
  title = {{{GLSP}}},
  author = {{Eclipse Foundation}},
  date = {2020},
  url = {https://www.eclipse.org/glsp/},
  urldate = {2020-09-29},
  abstract = {Diagram editors in the web/cloud with GLSP!},
  file = {C\:\\Users\\krire\\Zotero\\storage\\ACUSGSYD\\glsp.html},
  keywords = {eclipse,glsp,lsp,theia},
  organization = {{GLSP}}
}

@online{eclipsefoundationSiriusEasiestWay,
  title = {Sirius - {{The}} Easiest Way to Get Your Own {{Modeling Tool}}},
  author = {{Eclipse Foundation}},
  url = {https://www.eclipse.org/sirius/},
  urldate = {2020-12-05},
  file = {C\:\\Users\\krire\\Zotero\\storage\\IYA249PE\\sirius.html},
  keywords = {sirius}
}

@online{eclipsefoundationXtextLanguageEngineering,
  title = {Xtext - {{Language Engineering Made Easy}}!},
  author = {{Eclipse Foundation}},
  url = {https://www.eclipse.org/Xtext/},
  urldate = {2020-12-08},
  file = {C\:\\Users\\krire\\Zotero\\storage\\A6Q67QM3\\Xtext.html},
  keywords = {xtext}
}

@online{EclipseGLSPCommunity,
  title = {Eclipse {{GLSP}} Community},
  url = {https://spectrum.chat/glsp/?tab=posts},
  urldate = {2020-10-05},
  abstract = {The graphical language server platform (GLSP) provides extensible components to enable the development of diagram editors in web-applications via a…},
  langid = {english},
  organization = {{Spectrum}}
}

@software{EclipseglspGlsp2020,
  title = {Eclipse-Glsp/Glsp},
  date = {2020-09-23T07:26:36Z},
  origdate = {2019-10-31T15:14:15Z},
  url = {https://github.com/eclipse-glsp/glsp},
  urldate = {2020-10-05},
  abstract = {Graphical language server platform for building web-based diagram editors},
  keywords = {diagram,diagram-editors,glsp,graphical-models,lsp,lsp-server,protocol,sprotty,theia,theia-extension},
  organization = {{eclipse-glsp}}
}

@software{EclipseLsp4j2021,
  title = {Eclipse/Lsp4j},
  date = {2021-03-05T16:47:40Z},
  origdate = {2016-11-10T16:10:59Z},
  url = {https://github.com/eclipse/lsp4j},
  urldate = {2021-03-08},
  abstract = {A Java implementation of the language server protocol intended to be consumed by tools and language servers implemented in Java.},
  keywords = {eclipse,java,json-rpc,language-server-protocol,lsp},
  organization = {{Eclipse Foundation}}
}

@online{eclipsesourceEMFFormsEditors2016,
  title = {{{EMF Forms Editors}}},
  author = {{Eclipsesource}},
  date = {2016-02},
  url = {https://eclipsesource.com/blogs/tutorials/emf-forms-editors/},
  urldate = {2020-11-11},
  abstract = {EMF Forms provides three ready-to-use editors, which can be integrated into any kind of Eclipse IDE or RCP application: The Generic...},
  file = {C\:\\Users\\krire\\Zotero\\storage\\HADGHSQT\\emf-forms-editors.html},
  keywords = {ecore,emf,emf forms},
  langid = {american},
  organization = {{EclipseSource}}
}

@software{EclipsesourceGraphicalServerProtocol2019,
  title = {Eclipsesource/{{GraphicalServerProtocol}}},
  date = {2019-03-14T11:29:38Z},
  origdate = {2018-09-19T14:54:08Z},
  url = {https://github.com/eclipsesource/GraphicalServerProtocol},
  urldate = {2020-10-05},
  abstract = {Graphical Server Protocol. Contribute to eclipsesource/GraphicalServerProtocol development by creating an account on GitHub.},
  organization = {{EclipseSource}}
}

@online{eclipsesourceJSONForms,
  title = {{{JSON Forms}}},
  author = {{EclipseSource}},
  url = {https://jsonforms.io/docs/what-is-jsonforms},
  urldate = {2020-12-06},
  file = {C\:\\Users\\krire\\Zotero\\storage\\GUJUJ9JB\\what-is-jsonforms.html},
  keywords = {eclipsesource,emf,jsonforms}
}

@online{eclipsesourceServices,
  title = {Services},
  author = {{EclipseSource}},
  url = {https://eclipsesource.com/services/},
  urldate = {2020-12-09},
  file = {C\:\\Users\\krire\\Zotero\\storage\\S3F9MS9A\\services.html},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{EMFTutorial,
  title = {{{EMF Tutorial}}},
  url = {https://eclipsesource.com/blogs/tutorials/emf-tutorial/},
  urldate = {2020-10-06},
  abstract = {What every Eclipse developer should know about EMF This tutorial is an introduction to EMF and explains the basics of EMF....},
  file = {C\:\\Users\\krire\\Zotero\\storage\\USVCAFS9\\emf-tutorial.html},
  keywords = {eclipse,ecore,emf},
  langid = {american},
  organization = {{EclipseSource}}
}

@software{eugenneufeldEclipseemfcloudEmfcloudmodelserver2020,
  title = {Eclipse-Emfcloud/Emfcloud-Modelserver},
  author = {{Eugen Neufeld} and {Martin Fleck} and {Tobias Ortmayr} and {Nina Doschek} and {Cees Bos} and {Camille Letavernier}},
  date = {2020-12-01T10:51:32Z},
  origdate = {2019-11-01T20:35:55Z},
  url = {https://github.com/eclipse-emfcloud/emfcloud-modelserver},
  urldate = {2020-12-07},
  abstract = {Modelserver component. Contribute to eclipse-emfcloud/emfcloud-modelserver development by creating an account on GitHub.},
  keywords = {emf,model server},
  organization = {{eclipse-emfcloud}},
  version = {a303e75}
}

@software{eugenneufeldEclipsesourceCoffeeeditor2020,
  title = {Eclipsesource/Coffee-Editor},
  shorttitle = {Coffee-Editor},
  author = {{Eugen Neufeld} and {Lucal Koehler} and {Martin Fleck} and {Philip Langer} and {Tobias Ortmayr} and {et.al.}},
  date = {2020-10-05T08:27:55Z},
  origdate = {2018-06-27T08:41:28Z},
  url = {https://github.com/eclipsesource/coffee-editor},
  urldate = {2020-10-06},
  abstract = {An example of how to build the Theia-based tools including graphical editos, form-based editors, tree-based editors, textual DSLs, model analyisis, debugging and more. The coffee editor is part of the emf.cloud project. Please visit the emf.cloud home page for an overview of all features and an online live demonstration!},
  keywords = {coffee,coffee-editor,glsp,theia},
  organization = {{EclipseSource}},
  version = {f9d73c4}
}

@online{ExtensionsCapabilitiesOverview,
  title = {Extensions {{Capabilities Overview}}},
  url = {https://code.visualstudio.com/api/extension-capabilities/overview},
  urldate = {2020-10-29},
  abstract = {Learn the details of what's possible with Visual Studio Code's rich extension (plug-in) API.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\JPXUTFVP\\overview.html},
  keywords = {extension,vscode},
  langid = {english}
}

@inproceedings{forwardProblemsOpportunitiesModelcentric2008,
  title = {Problems and Opportunities for Model-Centric versus Code-Centric Software Development: A Survey of Software Professionals},
  shorttitle = {Problems and Opportunities for Model-Centric versus Code-Centric Software Development},
  booktitle = {Proceedings of the 2008 International Workshop on {{Models}} in Software Engineering},
  author = {Forward, Andrew and Lethbridge, Timothy C.},
  date = {2008-05-10},
  pages = {27--32},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1370731.1370738},
  url = {https://doi.org/10.1145/1370731.1370738},
  urldate = {2020-11-26},
  abstract = {We present some results of a survey of 113 software practitioners conducted between April and December 2007. The aim of the survey was to uncover their attitudes and experiences regarding software modeling, and development approaches that avoid modeling. We were motivated by observations that modeling is not widely adopted; many developers continue to take a code-centric approach. Key findings overall include: Modeling tools are primarily used to create documentation and for up-front design with little code generation; and participants believe that model-centric approaches to software engineering are easier but are currently not very popular as most participants currently work in code-centric environments. Key findings from sub-samples include: problems identified with model-centric approaches are similar regardless of a participant's country. Programmers that model extensively (versus those that do not model much) are more likely to agree that models become out of date and inconsistent with code.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\RIEK4LU4\\Forward and Lethbridge - 2008 - Problems and opportunities for model-centric versu.pdf},
  isbn = {978-1-60558-025-8},
  keywords = {adoption,attitudes,empirical study,questionnaire,software modeling,software practitioners,survey},
  series = {{{MiSE}} '08}
}

@online{GettingStartedCodes,
  title = {Getting {{Started}} with {{Codes}} of {{Conduct}}},
  url = {http://mozillascience.github.io/working-open-workshop/code_of_conduct/},
  urldate = {2021-05-20},
  file = {C\:\\Users\\krire\\Zotero\\storage\\E7DN9G87\\code_of_conduct.html},
  keywords = {code of conduct}
}

@online{gronbackEclipseModelingProject,
  title = {Eclipse {{Modeling Project}} | {{The Eclipse Foundation}}},
  author = {Gronback, Richard},
  url = {https://www.eclipse.org/modeling/emf/},
  urldate = {2020-10-06},
  abstract = {The Eclipse Foundation - home to a global community, the Eclipse IDE, Jakarta EE and over 375 open source projects, including runtimes, tools and frameworks.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\LJJSPECU\\emf.html},
  keywords = {eclipse,ecore,emf},
  langid = {english}
}

@software{guillaumehillairetEclipseemfcloudEmfjsonjackson2020,
  title = {Eclipse-Emfcloud/Emfjson-Jackson},
  author = {{Guillaume Hillairet}},
  date = {2020-12-01T15:46:41Z},
  origdate = {2020-02-21T20:30:16Z},
  url = {https://github.com/eclipse-emfcloud/emfjson-jackson},
  urldate = {2020-12-07},
  abstract = {emfjson-jackson. Contribute to eclipse-emfcloud/emfjson-jackson development by creating an account on GitHub.},
  keywords = {cloud,emf,json},
  organization = {{eclipse-emfcloud}}
}

@online{guindonEclipseMembershipEclipseSource,
  title = {Eclipse {{Membership}} {$>$} {{EclipseSource}} | {{The Eclipse Foundation}}},
  author = {Guindon, Christopher},
  url = {https://www.eclipse.org/membership/showMember.php?member_id=690},
  urldate = {2020-12-09},
  abstract = {The Eclipse Foundation - home to a global community, the Eclipse IDE, Jakarta EE and over 375 open source projects, including runtimes, tools and frameworks.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\VIWMQ2JM\\showMember.html},
  langid = {english}
}

@online{hannesvogtProvideDependencyGraph2020,
  title = {Provide a Dependency Graph via an Existing Language Server · {{Eclipse GLSP}}},
  author = {{Hannes Vogt} and {Philip Langer}},
  date = {2020-02-20T08:22:20},
  url = {https://spectrum.chat/glsp/general/provide-a-dependency-graph-via-an-existing-language-server~f4d2cf0d-b795-4d8c-88a5-b275e71fdd01},
  urldate = {2020-10-05},
  abstract = {Hi! I try to understand if GLSP would be a good approach to visualize a dependency graph in my language server. It's a bit hard to understand how the different…},
  file = {C\:\\Users\\krire\\Zotero\\storage\\6WPU6FKX\\provide-a-dependency-graph-via-an-existing-language-server~f4d2cf0d-b795-4d8c-88a5-b275e71fdd01.html},
  keywords = {glsp},
  langid = {english},
  organization = {{Spectrum}}
}

@online{helmingEclipseCheVs2018,
  title = {Eclipse {{Che}} vs. {{Eclipse Theia}}},
  author = {Helming, Jonas and Koegel, Maximilian},
  date = {2018-12-03T10:34:54+00:00},
  url = {https://eclipsesource.com/blogs/2018/12/03/eclipse-che-vs-eclipse-theia/},
  urldate = {2020-10-05},
  abstract = {In this article, we compare Eclipse Che with Eclipse Theia and explain their relationship – their differences and their overlap. In...},
  file = {C\:\\Users\\krire\\Zotero\\storage\\YMBEC5EK\\eclipse-che-vs-eclipse-theia.html},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingEclipseTheiaExtensions2019,
  title = {Eclipse {{Theia}} Extensions vs. Plugins vs. {{Che}}-{{Theia}} Plugins},
  author = {Helming, Jonas and Koegel, Maximilian},
  date = {2019-10-10T13:40:57+00:00},
  url = {https://eclipsesource.com/blogs/2019/10/10/eclipse-theia-extensions-vs-plugins-vs-che-theia-plugins/},
  urldate = {2020-10-05},
  abstract = {This article compares Eclipse Theia extensions to Eclipse Theia plugins, Che-Theia plugins and VS Code extensions/plugins},
  file = {C\:\\Users\\krire\\Zotero\\storage\\TBHWIL3X\\eclipse-theia-extensions-vs-plugins-vs-che-theia-plugins.html},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingEclipseTheiaIDE2019a,
  ids = {helmingEclipseTheiaIDE2019},
  title = {The {{Eclipse Theia IDE}} vs. {{VS Code}}},
  author = {Helming, Jonas and Koegel, Maximilian},
  date = {2019-12-06T11:55:09+00:00},
  url = {https://eclipsesource.com/blogs/2019/12/06/the-eclipse-theia-ide-vs-vs-code/},
  urldate = {2020-10-05},
  abstract = {In this article, we compare the Eclipse Theia IDE with VS Code. This comparison includes the usability concept, the technology stack, the ecosystem, the existibility and even more criteria.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\HM2XHC9T\\the-eclipse-theia-ide-vs-vs-code.html;C\:\\Users\\krire\\Zotero\\storage\\I4KIBFCG\\the-eclipse-theia-ide-vs-vs-code.html},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingEMFTutorial,
  title = {{{EMF Tutorial}}},
  author = {Helming, Jonas and Jonas, Maximilian Koegel and work as {consultants}, Maximilian co-lead EclipseSource They and Web-Based, Software Engineers for Building and are tool experts with a focus on IDEs, desktop-based tools Both and Tools, Domain-Specific and are project {leads}, modeling tools They and to various open source projects including EMF.cloud, committers and Forms, JSON and {GLSP} and {EMF} and Forms, E. M. F. and {EMFStore} and {Edapt} and {e4} and Platform, the EMF Client and Twitter, regular conferences speakers on these topics Email |},
  url = {https://eclipsesource.com/blogs/tutorials/emf-tutorial/},
  urldate = {2021-03-03},
  abstract = {What every Eclipse developer should know about EMF This tutorial is an introduction to EMF and explains the basics of EMF....},
  file = {C\:\\Users\\krire\\Zotero\\storage\\ZYBRIQPG\\emf-tutorial.html},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingEMFTutorial2014,
  title = {{{EMF Tutorial}}},
  author = {Helming, Jonas and Koegel, Maximilian},
  date = {2014-07-15},
  url = {https://eclipsesource.com/blogs/tutorials/emf-tutorial/},
  urldate = {2021-03-03},
  abstract = {What every Eclipse developer should know about EMF This tutorial is an introduction to EMF and explains the basics of EMF....},
  file = {C\:\\Users\\krire\\Zotero\\storage\\ZGLFJP8V\\emf-tutorial.html},
  keywords = {eclipsesource,ecore,editingdomain,emf},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingHowAddExtensions2019,
  title = {How to Add Extensions and Plugins to {{Eclipse Theia}}},
  author = {Helming, Jonas and Koegel, Maximilian},
  date = {2019-10-17T13:27:41+00:00},
  url = {https://eclipsesource.com/blogs/2019/10/17/how-to-add-extensions-and-plugins-to-eclipse-theia/},
  urldate = {2020-12-06},
  abstract = {This article describes how to add extensions and plugins to the Eclipse Theia IDE, during development time and during runtime.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\X7P4E3CW\\how-to-add-extensions-and-plugins-to-eclipse-theia.html},
  keywords = {extension,theia},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingHowBuildTree2021,
  title = {How to Build a Tree Editor in {{Eclipse Theia}}},
  author = {Helming, Jonas and Jonas, Maximilian Koegel and work as {consultants}, Maximilian co-lead EclipseSource They and Web-Based, Software Engineers for Building and are tool experts with a focus on IDEs, desktop-based tools Both and Tools, Domain-Specific and are project {leads}, modeling tools They and to various open source projects including EMF.cloud, committers and Forms, JSON and {GLSP} and {EMF} and Forms, E. M. F. and {EMFStore} and {Edapt} and {e4} and Platform, the EMF Client and Twitter, regular conferences speakers on these topics Email |},
  date = {2021-02-03T10:22:06+00:00},
  url = {https://eclipsesource.com/blogs/2021/02/03/how-to-build-a-tree-editor-in-eclipse-theia/},
  urldate = {2021-02-03},
  abstract = {In this article we introduce the tree/form editor framework for Eclipse Theia to build data-centric form editors with EMF.cloud},
  file = {C\:\\Users\\krire\\Zotero\\storage\\RVBP7ACR\\how-to-build-a-tree-editor-in-eclipse-theia.html},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingHowCreateDevelop2019,
  title = {How to Create/Develop an {{Eclipse Theia IDE}} Extension},
  author = {Helming, Jonas and Koegel, Maximilian},
  date = {2019-11-21T09:05:23+00:00},
  url = {https://eclipsesource.com/blogs/2019/11/21/how-to-create-develop-an-eclipse-theia-ide-extension/},
  urldate = {2020-10-05},
  abstract = {This article provides an overview on how to extend the Eclipse Theia IDE with custom Theia extensions.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\RXR7T7AL\\how-to-create-develop-an-eclipse-theia-ide-extension.html},
  keywords = {extension,theia},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingHowInversifyEclipse2018,
  title = {How to Inversify() in {{Eclipse Theia}}},
  author = {Helming, Jonas and Koegel, Maximilian},
  date = {2018-11-28T09:15:49+00:00},
  url = {https://eclipsesource.com/blogs/2018/11/28/how-to-inversify-in-eclipse-theia/},
  urldate = {2020-10-05},
  abstract = {In this article we will describe the basic concepts of dependency injection in Eclipse Theia using inversify. Dependency injection is used...},
  file = {C\:\\Users\\krire\\Zotero\\storage\\4EV4D99Z\\how-to-inversify-in-eclipse-theia.html},
  keywords = {di,inversify,theia},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingWebbasedModelingTool2020,
  title = {A Web-Based Modeling Tool Based on {{Eclipse Theia}}},
  author = {Helming, Jonas and {Maximilian Koegel}},
  date = {2020-07-24T08:20:24+00:00},
  url = {https://eclipsesource.com/blogs/2020/07/24/a-web-based-modeling-tool-based-on-eclipse-theia/},
  urldate = {2020-09-29},
  abstract = {Learn how to design and implement web- and cloud-based tools, domain-specific tools and modeling tools based on Eclipse Theia},
  file = {C\:\\Users\\krire\\Zotero\\storage\\UA5GWNQE\\a-web-based-modeling-tool-based-on-eclipse-theia.html},
  keywords = {eclipse,glsp,lsp,theia},
  langid = {american},
  organization = {{EclipseSource}}
}

@online{helmingWebbasedModelingTools2020,
  title = {Web-Based Modeling Tools Built with {{Eclipse}} Technologies},
  author = {Helming, Jonas},
  date = {2020-01-07T09:17:35+00:00},
  url = {http://modeling-languages.com/web-based-modeling-with-eclipse/},
  urldate = {2020-10-05},
  abstract = {Overview of the latest developments and project announcements around building web- and cloud-based modeling tools in the Eclipse ecosystem.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\X2I6KLPX\\web-based-modeling-with-eclipse.html},
  langid = {american},
  organization = {{Modeling Languages}}
}

@online{helmingWebbasedModelingTools2020a,
  title = {Web-Based Modeling Tools Built with {{Eclipse}} Technologies},
  author = {Helming, Jonas},
  date = {2020-01-07T09:17:35+00:00},
  url = {http://modeling-languages.com/web-based-modeling-with-eclipse/},
  urldate = {2020-12-08},
  abstract = {Overview of the latest developments and project announcements around building web- and cloud-based modeling tools in the Eclipse ecosystem.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\BY9VD8PL\\web-based-modeling-with-eclipse.html},
  keywords = {emf.cloud},
  langid = {american},
  organization = {{Modeling Languages}}
}

@online{helmingWelcomeEclipseTheia2018,
  title = {Welcome (at {{Eclipse}}), {{Theia}}!},
  author = {Helming, Jonas and Koegel, Maximilian},
  date = {2018-06-20T10:35:29+00:00},
  url = {https://eclipsesource.com/blogs/2018/06/20/welcome-at-eclipse-theia/},
  urldate = {2020-10-05},
  abstract = {In this article, we provide an overview about Eclipse Theia, an open source platform to build web- and cloud-based IDEs and...},
  file = {C\:\\Users\\krire\\Zotero\\storage\\HB4AZUU2\\welcome-at-eclipse-theia.html},
  langid = {american},
  organization = {{EclipseSource}}
}

@incollection{hevnerDesignCreativity2010,
  title = {Design and {{Creativity}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {145--156},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_11},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_11},
  urldate = {2021-02-16},
  abstract = {Abraham Maslow once said “The key question isn’t ‘What fosters creativity?’ But it is why in God’s name isn’t everyone creative? Where was the human potential lost? How was it crippled? I think therefore a good question might be not why do people create? But why do people not create or innovate? We have got to abandon that sense of amazement in the face of creativity, as if it were a miracle if anybody created anything.”Every designer is creative. In the world of software design, we also create artifacts. Where does this creativity come from? What exactly is meant to be creative? In this chapter we explore questions such as these. We also take a brief look at the creativity literature and discuss how information technology tools can help humans become more creative and vice versa.},
  isbn = {978-1-4419-5653-8},
  keywords = {Active Research Field,Creative Idea,Group Creativity,Virtual World,Wide Wall},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerDesignScienceResearch2010,
  title = {Design {{Science Research Frameworks}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {23--31},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_3},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_3},
  urldate = {2021-02-16},
  abstract = {The founding father of design science was Herbert E. Simon. Well known for his work on AI, decision making, and economics, Simon wrote a thought-provoking book called Sciences of the Artificial in the 1960s (Simon 1996). His profound insight was that certain phenomena or entities are “artificial” in the sense that they are contingent to the goals or purposes of their designer. In other words, they could have been different had the goals been different (as opposed to natural phenomena which are necessarily evolved given natural laws). He further posits: Since artifacts are contingent, how is a science of the artificial possible? How to study artifacts empirically? On the other hand, Simon also deals with the notion of complexity. This is necessary because artificiality and complexity are inextricably interwoven.},
  isbn = {978-1-4419-5653-8},
  keywords = {Design Science Research,Founding Father,Mental Model,Research Output,Theory Building},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerDesignScienceResearch2010a,
  title = {Design {{Science Research}} in {{Information Systems}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {9--22},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_2},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_2},
  urldate = {2021-02-16},
  abstract = {Design activities are central to most applied disciplines. Research in design has a long history in many fields including architecture, engineering, education, psychology, and the fine arts (Cross 2001). The computing and information technology (CIT) field since its advent in the late 1940s has appropriated many of the ideas, concepts, and methods of design science that have originated in these other disciplines. However, information systems (IS) as composed of inherently mutable and adaptable hardware, software, and human interfaces provide many unique and challenging design problems that call for new and creative ideas.},
  isbn = {978-1-4419-5653-8},
  keywords = {Design Cycle,Design Science,Group Decision Support System,Information System,Research Cycle},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerDesignScienceResearch2010b,
  title = {Design {{Science Research}}: {{Looking}} to the {{Future}}},
  shorttitle = {Design {{Science Research}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {261--268},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_18},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_18},
  urldate = {2021-02-16},
  abstract = {The previous chapters have taken you through the fundamentals of design science research, the problems, solutions space, design process, frameworks, outputs and artifacts, theories and dissemination of the research results. The design science research paradigm is highly relevant to information systems (IS) research because it directly addresses two of the key issues of the discipline: the central, albeit controversial, role of the IT artifact in IS research (Weber 1987; Orlikowski and Iacono 2001; Benbasat and Zmud 2003) and the lack of professional relevance of IS research (Benbasat and Zmud 1999; Hirschheim and Klein 2003). Design science, as conceptualized by Simon (1996), supports a pragmatic research paradigm that calls for the creation of innovative artifacts to solve real-world problems. Thus, design science research combines a focus on the IT artifact with a high priority on relevance in the application domain.},
  isbn = {978-1-4419-5653-8},
  keywords = {Carbon Footprint,Clinical Decision Support System,Information System,Personal Health Record,Social Networking Site},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerDesignTheory2010,
  title = {On {{Design Theory}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {33--42},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_4},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_4},
  urldate = {2021-02-16},
  abstract = {Science progresses because of advancement in theories. Dictionary definitions show that the word theory can take on many meanings, including “a mental view” or “contemplation,” “a concept or mental scheme of something to be done, or the method of doing it; a systematic statement of rules or principles to be followed,” a “system of ideas or statements held as an explanation or account of a group of facts or phenomena; a hypothesis that has been confirmed or established by observation or experiment and is propounded or accepted as accounting for the known facts; statements of what are held to be the general laws, principles, or causes of something known or observed,” a “mere hypothesis, speculation, conjecture” (Gregor 2006).},
  isbn = {978-1-4419-5653-8},
  keywords = {Descriptive Theory,Design Theory,Earning Announcement,Normative Theory,Theory Building},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerDisseminatingDesignScience2010,
  title = {Disseminating {{Design Science Research}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {255--259},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_17},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_17},
  urldate = {2021-02-16},
  abstract = {As you near the completion of a design science research project, your thoughts are now diverted to what to do next? Every researcher wants to publish their finding to the scientific community and in particular to their peer group. While academic publishing is certainly a preferred outcome of DSR, we would also like to mention that another possible (and lucrative) outcome of DSR is entrepreneurial activity for those who have the mindset. If you have built it, let them come.As experienced researchers, and editors in the field, we share with the readers the challenges and issues of writing papers for leading conference and journals. In that context, we also briefly discuss getting funds from foundation to support your research. We also discuss the necessary first steps toward commercializing DSR by building a start-up company around the project artifact.},
  isbn = {978-1-4419-5653-8},
  keywords = {Acceptance Rate,Design Science Research,Initial Public Offering,Software Technology Research,Venture Capital Fund},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerEvaluation2010,
  title = {Evaluation},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {109--119},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_9},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_9},
  urldate = {2021-02-16},
  abstract = {Evaluation is a key element in the design of IT-based artifacts. A designer finds a suitable and interesting problem to solve. Then they come up with design solutions. That is followed by the actual build phase. After they have built the artifact, the next phase is evaluating for efficiency, utility, or performance.Evaluation is a crucial component in the design science research process. The designed IT artifact is a socio-technical entity that exists within an environment (business or social) which lays out the requirements for its evaluation. Such evaluation of IT artifacts requires definition of appropriate metrics and possibly the gathering and analysis of appropriate data. IT artifacts can be evaluated in terms of functionality, completeness, consistency, accuracy, performance, reliability, usability, fit with the organization, and other relevant quality attributes (Hevner, March et al. 2004).In this chapter, it is our goal to help the reader understand the different issues, questions, methods, and techniques that arise when one does evaluation. To present a full detailed analysis of various techniques is beyond the scope of this chapter or the book, but we hope that the reader will learn to ask the right questions, know when to apply which technique and be confident to look at the right places for more answers.},
  isbn = {978-1-4419-5653-8},
  keywords = {Clinical Decision Support System,Design Science,Information System Architecture,Postoperative Infection Rate,Reminder Group},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerIntroductionDesignScience2010,
  title = {Introduction to {{Design Science Research}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {1--8},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_1},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_1},
  urldate = {2021-02-16},
  abstract = {Since the dawn of the digital revolution, information technologies have changed the way we live, work, play, and entertain. Designers of IT-based digital technology products play a critical role in ensuring that their designed artifacts are not just beautiful but provide value to their users. Users are increasingly interacting with a digital world. Designing interactions in this new world is a challenging task. The experiences we have when we browse the web, or visit amazon.com, sell/buy stuff on eBay or play amusing games on our mobile cell phones do have a tremendous impact on how we live our lives. Designing information systems is even more challenging.},
  isbn = {978-1-4419-5653-8},
  keywords = {Design Knowledge,Design Science Research,Information System,Research Paradigm,Routine Design},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerPeopleDesign2010,
  title = {People and {{Design}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {79--86},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_7},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_7},
  urldate = {2021-02-16},
  abstract = {Information technology design is by no means simple. Most real-world problems are not simple and they often have no correct solution. The challenges that everyday designers’ face is to handle trade-offs. It is the conscious choice among many alternatives each of which places constraints on utility and resources. As Mitch Kapor suggests above, a designer stands with one foot in the technology and one foot in the domain of human concerns, and these two worlds are not easily commensurable (Winograd 1996).},
  isbn = {978-1-4419-5653-8},
  keywords = {Consumer Phase,Human Concern,Jazz Musician,Online Discussion Group,Xerox PARC},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerScienceDesignSoftwareIntensive2010,
  title = {A {{Science}} of {{Design}} for {{Software}}-{{Intensive Systems}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {63--77},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_6},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_6},
  urldate = {2021-02-16},
  abstract = {Future complex software-intensive systems (SIS) will be vastly different from the software systems that run today’s world. Revolutionary advances in hardware, networking, information, and human interface technologies will require entirely new ways of thinking about how software-intensive systems are conceptualized, built, and evaluated. As we envision the future of tera1-computing and even peta2-computing environments, new science of design principles are needed to provide the foundations for managing issues of complexity, composition, quality, cost, and control of software-intensive systems.},
  isbn = {978-1-4419-5653-8},
  keywords = {Computational Thinking,Dynamic Composition,Emergent Behavior,Software Component,Software Layer},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{hevnerSoftwareDesignPresent2010,
  title = {Software {{Design}}: {{Past}} and {{Present}}},
  shorttitle = {Software {{Design}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Hevner, Alan and Chatterjee, Samir},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {87--107},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_8},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_8},
  urldate = {2021-02-16},
  abstract = {The design of software has been one of the greatest challenges in the development of information systems. From its fairly primitive beginnings in the form of toggling on/off switches and punching holes in paper tapes, software has come to dominate the cost of all forms of information systems. Yet, instead of gaining increasing mastery over the processes of software design, we continue to be challenged by new software technologies, greater quality expectations, and higher complexities of integrated systems. Thus, software design remains an essentially wicked problem that is typically crafted to each software-intensive system developed.},
  isbn = {978-1-4419-5653-8},
  keywords = {Business Application,Business Process,Software Architecture,Software Development,Software Development Process},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@online{HowStructureDissertation,
  title = {How to {{Structure}} a {{Dissertation}} | {{Step}}-by-{{Step Guide}}},
  url = {https://www.scribbr.com/category/dissertation/},
  urldate = {2021-02-16},
  abstract = {What are the elements of a well-structured dissertation? Our step-by-step guide takes you all the way from the title page to the appendix.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\JL882Y8E\\dissertation.html},
  keywords = {dissertation,guide,thesis,tips},
  langid = {american},
  organization = {{Scribbr}}
}

@inproceedings{hutchinsonEmpiricalAssessmentMDE2011,
  title = {Empirical Assessment of {{MDE}} in Industry},
  booktitle = {Proceedings of the 33rd {{International Conference}} on {{Software Engineering}}},
  author = {Hutchinson, John and Whittle, Jon and Rouncefield, Mark and Kristoffersen, Steinar},
  date = {2011-05-21},
  pages = {471--480},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1985793.1985858},
  url = {https://doi.org/10.1145/1985793.1985858},
  urldate = {2020-11-17},
  abstract = {This paper presents some initial results from a twelve-month empirical research study of model driven engineering (MDE). Using largely qualitative questionnaire and interview methods we investigate and document a range of technical, organizational and social factors that apparently influence organizational responses to MDE: specifically, its perception as a successful or unsuccessful organizational intervention. We then outline a range of lessons learned. Whilst, as with all qualitative research, these lessons should be interpreted with care, they should also be seen as providing a greater understanding of MDE practice in industry, as well as shedding light on the varied, and occasionally surprising, social, technical and organizational factors that affect success and failure. We conclude by suggesting how the next phase of the research will attempt to investigate some of these issues from a different angle and in greater depth.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\XET6F8QH\\Hutchinson et al. - 2011 - Empirical assessment of MDE in industry.pdf},
  isbn = {978-1-4503-0445-0},
  keywords = {adoption,empirical software engineering,industry,model driven engineering},
  series = {{{ICSE}} '11}
}

@incollection{iivariTwelveThesesDesign2010,
  title = {Twelve {{Theses}} on {{Design Science Research}} in {{Information Systems}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Iivari, Juhani},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {43--62},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_5},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_5},
  urldate = {2021-02-16},
  abstract = {This essay discusses 12 theses for guiding design science research. They are aimed at strengthening the design science orientation of Information Systems, clarifying future discourses on design science research aspects of the discipline, and giving some further guidelines for design science research in Information Systems.},
  isbn = {978-1-4419-5653-8},
  keywords = {Design Science,Design Theory,Empirical Regularity,Information System,Technology Acceptance Model},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@inproceedings{jacomeSoftwareDevelopmentTools2017,
  title = {Software {{Development Tools}} in {{Model}}-{{Driven Engineering}}},
  author = {Jácome, Santiago and Ferreira, Juan and Corral-Diaz, Maria},
  date = {2017-10-25},
  doi = {10.1109/CONISOFT.2017.00024},
  abstract = {Model-Driven Engineering (MDE) is a software development approach that considers the systematic use of models to develop software rather than using general purpose programming languages. The development of MDE based on Domain-Specific Languages (DSLs) covers two stages. The first, the creation of a set of artifacts such as DSLs, model transformation mechanisms, code generators. A second stage, where people do not necessarily with computer training using the artifacts created, develop applications simply because of the high level of abstraction allowed by technology. However, there are several obstacles that need to be overcome in order for this new approach to software development to be widely used. One of them, the lack of knowledge of tools and the development process with MDE. In order to minimize this problem, in the present work a categorization and description of the main environments and tools used in MDE are carried out. Using some of the tools analyzed also points out the process of creating a DSL. keywords-Model-Driven Engineering; software development tools, models; MDE; DSL},
  file = {C\:\\Users\\krire\\Zotero\\storage\\C5GXPXKM\\Jácome et al. - 2017 - Software Development Tools in Model-Driven Enginee.pdf}
}

@online{jonashelmingGraphicalLanguageServer2019,
  title = {The {{Graphical Language Server Platform}}/{{Protocol}} - {{EclipseSource}}},
  author = {{Jonas Helming} and {Maximilian Koegel}},
  date = {2019-11-04},
  url = {https://eclipsesource.com/blogs/2019/11/04/introducing-the-graphical-language-server-protocol-platform-eclipse-glsp/},
  urldate = {2020-09-29},
  file = {C\:\\Users\\krire\\Zotero\\storage\\BSQCXXBL\\introducing-the-graphical-language-server-protocol-platform-eclipse-glsp.html},
  organization = {{EclipseSource}}
}

@online{jonashelmingGraphicalLanguageServer2019a,
  title = {The {{Graphical Language Server Platform}}/{{Protocol}}},
  author = {{Jonas Helming} and Koegel, Maximilian},
  date = {2019-11-04T11:26:05+00:00},
  url = {https://eclipsesource.com/blogs/2019/11/04/introducing-the-graphical-language-server-protocol-platform-eclipse-glsp/},
  urldate = {2020-10-05},
  abstract = {GLSP allows building web-based, browser-based or cloud-based diagram editors for graphical (modeling) languages and migrating existing diagrams to the web.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\4C7I32A6\\introducing-the-graphical-language-server-protocol-platform-eclipse-glsp.html},
  langid = {american},
  organization = {{EclipseSource}}
}

@article{jonwhittleTaxonomyToolrelatedIssues2015,
  title = {A Taxonomy of Tool-Related Issues Affecting the Adoption of Model-Driven Engineering},
  author = {{Jon Whittle} and {John Hitchinson} and {Mark Rouncefield} and {Håkan Burden} and {Rogard Heldal}},
  date = {2015},
  doi = {10.1007/s10270-015-0487-8},
  abstract = {Although poor tool support is often blamed for the low uptake of model-driven engineering (MDE), recent studies have shown that adoption problems are as likely to be down to social and organizational factors as with tooling issues. This article discusses the impact of tools on MDE adoption and practice and does so while placing tooling within a broader organizational context. The article revisits previous data on MDE use in industry (19 in-depth interviews with MDE practitioners) and reanalyzes that data through the specific lens of MDE tools in an attempt to identify and categorize the issues that users had with the tools they adopted. In addition, the article presents new data: 20 new interviews in two specific companies—and analyzes it through the same lens. A key contribution of the paper is a loose taxonomy of tool-related considerations, based on empirical industry data, which can be used to reflect on the tooling landscape as well as inform future research on MDE tools.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\6JID5XLK\\Whittle2017_Article_ATaxonomyOfTool-relatedIssuesA.pdf},
  keywords = {adoption}
}

@online{jordicabotFailedConvinceMy2015,
  title = {I Failed to Convince My Students about Code-Generation},
  author = {{Jordi Cabot}},
  date = {2015-02-09T06:53:56+00:00},
  url = {https://modeling-languages.com/failed-convince-students-benefits-code-generation/},
  urldate = {2020-12-04},
  abstract = {I asked my students to use a code-generation tool to develop a simple CRUD-like application. This is what they have to say about the experience.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\7WBT3DFT\\failed-convince-students-benefits-code-generation.html},
  keywords = {adoption,students},
  langid = {american},
  organization = {{Modeling Languages}}
}

@online{json-rpcworkinggroupJSONRPCSpecification2010,
  title = {{{JSON}}-{{RPC}} 2.0 {{Specification}}},
  shorttitle = {{{JSON}}-{{RPC Specification}}},
  author = {{JSON-RPC Working Group}},
  date = {2010-03-26},
  url = {https://www.jsonrpc.org/specification},
  urldate = {2020-09-23},
  file = {C\:\\Users\\krire\\Zotero\\storage\\7XIIR72E\\specification.html},
  keywords = {JSON-RPC,LSP},
  langid = {english}
}

@incollection{judgeDesignLanguageKnowledge2010,
  title = {A {{Design Language}} for {{Knowledge Management Systems}} ({{KMS}})},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Judge, Robert},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {157--177},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_12},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_12},
  urldate = {2021-02-16},
  abstract = {As with all species, humans spend their life in competition. Unlike other organisms, we carry this competitive drive past mere survival and reproduction into the structures of our social and business life. The structures of our business environment revolve around the ability of an organization to obtain long-term competitiveness through the control of rare and valuable resources that have limited substitutability, mobility, and imitability (Barney, 1991, Peteraf, 1993). Knowledge is precisely such a rare and valuable resource and does add greatly to an organization’s ability to sustain competitiveness (Alavi and Leidner, 2001, Kogut and Zander, 1992, Argote and Ingram, 2000).},
  isbn = {978-1-4419-5653-8},
  keywords = {Explicit Information,Information Packet,Interarrival Time,Knowledge Flow,Knowledge Management System},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@inproceedings{kahaniProblemsEclipseModeling2016,
  title = {The Problems with Eclipse Modeling Tools: A Topic Analysis of Eclipse Forums},
  shorttitle = {The Problems with Eclipse Modeling Tools},
  booktitle = {Proceedings of the {{ACM}}/{{IEEE}} 19th {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}},
  author = {Kahani, Nafiseh and Bagherzadeh, Mojtaba and Dingel, Juergen and Cordy, James R.},
  date = {2016-10-02},
  pages = {227--237},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2976767.2976773},
  url = {https://doi.org/10.1145/2976767.2976773},
  urldate = {2020-11-17},
  abstract = {Eclipse offers a wide range of tools supporting various aspects of modeling and Model-Driven Engineering (MDE). Arguably, the Eclipse ecosystem has been and continues to be one of the most important modeling tool repositories and sources of information about these tools, with, for example, more than 180,000 posts in the modeling forums since 2002. In this paper, we collect and analyze the content of the 30 most widely used Eclipse forums associated with different modeling and MDE tools, such as EMF, Xtext, ATL, Epsilon, and GMF. Using state-of-the-art text mining techniques coupled with manual analysis, we explore these forums with respect to two important questions: What are the primary issues, problems, and challenges raised in the use of these tools? And, perhaps even more important: Which of these issues are most commonly faced by "newbies" in the MDE community? Our study provides supporting evidence for some commonly held but unproven beliefs, such that plug-ins and documentation issues are the most common, and suggests which issues actually present the biggest "barriers to entry" for new users of MDE tools, and how they might be addressed.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\5MEPMEGF\\Kahani et al. - 2016 - The problems with eclipse modeling tools a topic .pdf},
  isbn = {978-1-4503-4321-3},
  keywords = {adoption,eclipse,ecore,emf,model-driven engineering (MDE),topic analysis},
  series = {{{MODELS}} '16}
}

@inproceedings{karrerRequirementsExtensibleObjectoriented1990,
  title = {Requirements for an Extensible Object-Oriented Tree/Graph Editor},
  booktitle = {Proceedings of the 3rd Annual {{ACM SIGGRAPH}} Symposium on {{User}} Interface Software and Technology  - {{UIST}} '90},
  author = {Karrer, Anthony and Scacchi, Walt},
  date = {1990},
  pages = {84--91},
  publisher = {{ACM Press}},
  location = {{Snowbird, Utah, United States}},
  doi = {10.1145/97924.97934},
  url = {http://portal.acm.org/citation.cfm?doid=97924.97934},
  urldate = {2020-11-14},
  eventtitle = {The 3rd Annual {{ACM SIGGRAPH}} Symposium},
  file = {C\:\\Users\\krire\\Zotero\\storage\\EJ62ZZ46\\Karrer and Scacchi - 1990 - Requirements for an extensible object-oriented tre.pdf},
  isbn = {978-0-89791-410-9},
  keywords = {editor,graph editor,requirements,tree editor},
  langid = {english}
}

@online{koegelEMFDosDon2013,
  title = {{{EMF Dos}} and {{Don}}´ts \#9},
  author = {Koegel, Maximilian},
  date = {2013-05-16T10:54:39+00:00},
  url = {https://eclipsesource.com/blogs/2013/05/16/emf-dos-and-donts-9/},
  urldate = {2020-11-11},
  abstract = {EMF is a very powerful framework and with power comes…responsibility. You can achieve great things with a minimum of effort using...},
  file = {C\:\\Users\\krire\\Zotero\\storage\\8QYXSVDZ\\emf-dos-and-donts-9.html},
  keywords = {ecore,emf,tree view},
  langid = {american},
  organization = {{EclipseSource}}
}

@inproceedings{kolovosAssessingUseEclipse2015,
  title = {Assessing the {{Use}} of {{Eclipse MDE Technologies}} in {{Open}}-{{Source Software Projects}}},
  author = {Kolovos, Dimitrios and Matragkas, Nicholas and Korkontzelos, Ioannis and Ananiadou, Sophia and Paige, Richard},
  date = {2015-09-01},
  abstract = {We assess the use of several Eclipse-based Model-Driven Engineering technologies (e.g. EMF, GMF, Xtext, Sirius, ATL, QVTO, Epsilon) in open-source software development projects hosted on GitHub. We discuss our data collection and analysis methodology, and present a number of findings related to the extent to which such technologies appear to be used in open-source projects on GitHub. Our study has revealed, among others, a significant number of GitHub repositories that make use of such technologies and a substantial community of increasingly active MDE-literate developers.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\Z5UUM2C9\\Kolovos et al. - 2015 - Assessing the Use of Eclipse MDE Technologies in O.pdf},
  keywords = {adoption,eclipse,ecore,emf,github}
}

@inproceedings{kuhnExploratoryStudyForces2012,
  title = {An {{Exploratory Study}} of {{Forces}} and {{Frictions Affecting Large}}-{{Scale Model}}-{{Driven Development}}},
  booktitle = {Model {{Driven Engineering Languages}} and {{Systems}}},
  author = {Kuhn, Adrian and Murphy, Gail C. and Thompson, C. Albert},
  editor = {France, Robert B. and Kazmeier, Jürgen and Breu, Ruth and Atkinson, Colin},
  date = {2012},
  pages = {352--367},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-33666-9_23},
  abstract = {In this paper, we investigate model-driven engineering, reporting on an exploratory case-study conducted at a large automotive company. The study consisted of interviews with 20 engineers and managers working in different roles. We found that, in the context of a large organization, contextual forces dominate the cognitive issues of using model-driven technology. The four forces we identified that are likely independent of the particular abstractions chosen as the basis of software development are the need for diffing in software product lines, the needs for problem-specific languages and types, the need for live modeling in exploratory activities, and the need for point-to-point traceability between artifacts. We also identified triggers of accidental complexity, which we refer to as points of friction introduced by languages and tools. Examples of the friction points identified are insufficient support for model diffing, point-to-point traceability, and model changes at runtime.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\G63BCN2A\\Kuhn et al. - 2012 - An Exploratory Study of Forces and Frictions Affec.pdf},
  isbn = {978-3-642-33666-9},
  keywords = {adoption,Domain Expert,industry,Software Development Process,Software Product Line,Test Engineer,Visual Language},
  langid = {english},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@inproceedings{kuzniarzTeachingModelDrivenSoftware2016,
  title = {Teaching {{Model}}-{{Driven Software Development}}: {{A Pilot Study}}},
  shorttitle = {Teaching {{Model}}-{{Driven Software Development}}},
  booktitle = {Proceedings of the 2016 {{ITiCSE Working Group Reports}}},
  author = {Kuzniarz, Ludwik and Martins, Luiz Eduardo G.},
  date = {2016-07-09},
  pages = {45--56},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3024906.3024909},
  url = {https://doi.org/10.1145/3024906.3024909},
  urldate = {2020-11-26},
  abstract = {Software development is a process starting with specification of requirements, then providing design of the required software and implementing the design. Introducing understanding of the process and teaching the skills required for conducting the process is an important learning objective in any CS/SE curriculum. Recently a new paradigm -- model-driven software development - has been introduced and extensively used in order to manage increasing complexity in the development of software. We want to investigate and discuss the state-of-the-practice of teaching MDSD and further to provide suggestions on what to include in the teaching curricula and how to teach MDSD in a proper way. The paper presents the results of the work performed by the ITiCSE 2016 "Teaching Model-Driven Software Development" working group. The objective for the work performed at ITiCSE was to elaborate on a foreseen survey based framework for the research by performing a pilot study using the framework. The pilot study was supposed to validate the framework by performing the initial survey, presenting the results, drawing conclusions from the results but also to find out necessary changes and modifications for the research framework so that it could be used for further more extensive research.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\HP689S85\\Kuzniarz and Martins - 2016 - Teaching Model-Driven Software Development A Pilo.pdf},
  isbn = {978-1-4503-4882-9},
  keywords = {adoption,mdse,Model-driven software development,software engineering education},
  series = {{{ITiCSE}} '16}
}

@inproceedings{lafontantGentlemanLightweightWebbased2020,
  ids = {lafontantGentlemanLightweightWebbased2020a},
  title = {Gentleman: A Light-Weight Web-Based Projectional Editor Generator},
  shorttitle = {Gentleman},
  booktitle = {Proceedings of the 23rd {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}: {{Companion Proceedings}}},
  author = {Lafontant, Louis-Edouard and Syriani, Eugene},
  date = {2020-10-16},
  pages = {1--5},
  publisher = {{ACM}},
  location = {{Virtual Event Canada}},
  doi = {10.1145/3417990.3421998},
  url = {https://dl.acm.org/doi/10.1145/3417990.3421998},
  urldate = {2020-11-17},
  abstract = {In the activity of software development and modeling, users should benefit from as much freedom as possible to express themselves, and this characteristic also extends to the tools they use. In recent years, projectional editors have proven to be a valid approach to obtain such capabilities by enabling language extension and composition and various notations. However, current solutions are heavyweight, platform-specific, and suffer from poor usability. To better support this paradigm and minimize the risk of arbitrary and accidental constraints in expressivity, we introduce Gentleman, a lightweight web-based projectional editor generator. Gentleman allows the user to define a model and projections for its concepts, and use the generated editor to create the model instances. We demonstrate how to define a projectional editor for Mindmap modeling, covering model definition, text and table projection, multi-projection, and styling to showcase its main features.},
  eventtitle = {{{MODELS}} '20: {{ACM}}/{{IEEE}} 23rd {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}},
  file = {C\:\\Users\\krire\\Zotero\\storage\\EPKBLSBJ\\Lafontant and Syriani - 2020 - Gentleman a light-weight web-based projectional e.pdf;C\:\\Users\\krire\\Zotero\\storage\\JREN4UM3\\Lafontant and Syriani - 2020 - Gentleman a light-weight web-based projectional e.pdf},
  isbn = {978-1-4503-8135-2},
  keywords = {ecore,projectional editor},
  langid = {english}
}

@online{lajmiModelingBrowserWhat2016,
  title = {Modeling in the {{Browser}}: {{What DSL Forge}} Gives for Free},
  shorttitle = {Modeling in the {{Browser}}},
  author = {Lajmi, Amine},
  date = {2016-04-14T03:54:58+00:00},
  url = {https://modeling-languages.com/modeling-browser-dsl-forge/},
  urldate = {2020-11-14},
  abstract = {A web front-end for your modeling software thanks to this technology to develop domain-specific language editors for web apps and cloud IDEs},
  file = {C\:\\Users\\krire\\Zotero\\storage\\J2G7CBQD\\modeling-browser-dsl-forge.html},
  keywords = {cloud ide,dsl,web},
  langid = {american},
  organization = {{Modeling Languages}}
}

@online{m.milinkovichEclipseFoundationEclipse2005,
  title = {About the {{Eclipse Foundation}} | {{The Eclipse Foundation}}},
  author = {{M. Milinkovich}},
  date = {2005-11-20},
  url = {https://www.eclipse.org/org/},
  urldate = {2020-12-09},
  abstract = {The Eclipse Foundation - home to a global community, the Eclipse IDE, Jakarta EE and over 375 open source projects, including runtimes, tools and frameworks.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\HWX7T3WC\\org.html},
  langid = {english}
}

@incollection{marchDesignScienceManagement2010,
  title = {Design {{Science}} in the {{Management Disciplines}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {March, Salvatore T. and Vogus, Timothy J.},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {195--208},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_14},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_14},
  urldate = {2021-02-16},
  abstract = {Design science and natural science are complementary research paradigms in the management disciplines. Fundamentally the task of management is to develop, articulate, and achieve organizational goals and purposes. Design science research addresses that task by creating novel and effective artifacts that are demonstrated to improve managers’ capability to change “existing situations into preferred ones” (Simon (1996), p. 130). Natural science research addresses it by developing theories that provide deep, principled explanations of phenomena, justified by rigorous empirical evidence that managers can use to guide their actions. Designed artifacts have no special dispensation from the laws of nature; however, business organizations and the environments in which they operate are social constructions (Searle, J. R. (2006) Social ontology: some basic principles, Anthropological Theory 6 (1), pp. 12–29). They are themselves artifacts designed to achieve human goals, purposes, and intentions, influenced by and operating within the context of emergent and intentional human behavior. Furthermore, natural science explanations of how or why an artifact works or does not work may lag years behind the application of the artifact. If academic research is to make significant contributions to management practice it must utilize the results from each paradigm to guide the other. There is evidence that this integration is beginning to take place in several management disciplines including information systems and organizational science. This paper summarizes and assesses this emerging work.},
  isbn = {978-1-4419-5653-8},
  keywords = {Design Science,Design Science Research,Natural Science Research,Organization Design,Wicked Problem},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@incollection{markusvolterFrameworkbasierteGUIEntwicklung2004,
  title = {Framework-Basierte {{GUI Entwicklung}}},
  author = {{Markus Völter}},
  date = {2004-05-10},
  url = {http://www.voelter.de/data/pub/GUIEntwicklungKapitel.pdf},
  urldate = {2020-11-14},
  file = {C\:\\Users\\krire\\Zotero\\storage\\QJWH32YF\\GUIEntwicklungKapitel.pdf}
}

@online{martinfowlerLanguageWorkbenchesKillerApp2005,
  title = {Language {{Workbenches}}: {{The Killer}}-{{App}} for {{Domain Specific Languages}}?},
  shorttitle = {Language {{Workbenches}}},
  author = {{Martin Fowler}},
  date = {2005-06-12},
  url = {https://martinfowler.com/articles/languageWorkbench.html},
  urldate = {2020-11-14},
  abstract = {Most new ideas in software developments are really new variations on old ideas. This article describes one of these, the growing idea of a class of tools that I call Language Workbenches - examples of which include Intentional Software, JetBrains's Meta Programming System, and Microsoft's Software Factories. These tools take an old style of development - which I call language oriented programming and use IDE tooling in a bid to make language oriented programming a viable approach. Although I'm not enough of a prognosticator to say whether they will succeed in their ambition, I do think that these tools are some of the most interesting things on the horizon of software development. Interesting enough to write this essay to try to explain, at least in outline, how they work and the main issues around their future usefulness.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\56Q4C5ND\\languageWorkbench.html},
  keywords = {dsl,editor,projectional editing,workbench},
  langid = {english},
  organization = {{martinfowler.com}}
}

@online{martinfowlerLanguageWorkbenchesModel2005,
  title = {Language {{Workbenches}} and {{Model Driven Architecture}}},
  author = {{Martin Fowler}},
  date = {2005-06-12},
  url = {https://martinfowler.com/articles/mdaLanguageWorkbench.html},
  urldate = {2020-11-14},
  abstract = {There's been a recent surge in development of tools that allow you integrate between multiple Domain Specific Languages (DSL) - tools that I refer to as language workbenches. Much of the discussion around language workbenches is very similar to the discussion around the Object Management Group's Model Driven Architecture (MDA). In my view the MDA means different things to different people - and this effects how we view the relationship between MDA and language workbenches. Certainly there groups of MDA practitioners who are using MDA ideas to build a language workbench. However my feeling is that the help MDA provides is partial, at best. A broader school of Model Driven Development (MDD) echoes many of these ideas without the links to the MDA standards - this is something that is very much in line with the ideas of a language workbench.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\8REWTSP2\\mdaLanguageWorkbench.html},
  keywords = {language workbench,mda,mof,uml},
  langid = {english},
  organization = {{martinfowler.com}}
}

@online{martinfowlerProjectionalEditing2008,
  title = {{{ProjectionalEditing}}},
  shorttitle = {{{ProjectionalEditing}}},
  author = {{Martin Fowler}},
  date = {2008-01-14},
  url = {https://martinfowler.com/bliki/ProjectionalEditing.html},
  urldate = {2020-11-14},
  abstract = {An alternative to SourceEditing is the idea that the core definition of a system should be held in a model and edited through projections.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\48WP8XCR\\ProjectionalEditing.html},
  keywords = {editor,projectional editing,tree editor},
  langid = {english},
  organization = {{martinfowler.com}}
}

@online{maximiliankoegelWebbasedModelingTools2020,
  title = {Web-Based Modeling Tools with {{EMF}}.Cloud (Shared)},
  author = {{Maximilian Koegel} and {Philip Langer}},
  date = {2020},
  url = {https://docs.google.com/presentation/d/e/2PACX-1vRVnzfSELGwVrZNk5kfSKXtM5Te9hIbzPpnIoi40IEn7QzwFF3pAaXDtq1bg18RS5X1YfHZ1Xr1qb6K/pub?start=false&loop=false&delayms=3000&usp=embed_facebook},
  urldate = {2020-10-06},
  abstract = {Web-based modeling tools with EMF.cloud Philip Langer \& Maximilian Koegel EclipseSource},
  file = {C\:\\Users\\krire\\Zotero\\storage\\KP6TPX3H\\pub.html},
  keywords = {coffee-maker,glsp,theia},
  langid = {english},
  organization = {{Google Docs}}
}

@online{maxshaposhnikIntroductionDevfile2020,
  title = {Introduction to {{Devfile}}},
  author = {{Max Shaposhnik} and {Michal Vala} and {Lukas Krejci} and {Sergii Kabashniuk}},
  date = {2020-01-08},
  url = {https://redhat-developer.github.io/devfile/},
  urldate = {2020-12-07},
  abstract = {devfile v1},
  file = {C\:\\Users\\krire\\Zotero\\storage\\NEMU2E86\\devfile.html},
  keywords = {che},
  langid = {american},
  organization = {{Introduction to Devfile}}
}

@misc{melaniebatsSwapcardMelanieBats2020,
  title = {Swapcard with {{Melanie Bats}}},
  author = {{Mélanie Bats}},
  date = {2020-10-19},
  abstract = {State of Sirius regarding dev using Theia: We open sourced Sirius Web, it is a new framework to rendrer sirius configuration in a browser, you should attend our talk on wednesdat to get more details about that Sirius Web vs EMF.Cloud vs GLSP : Sirius Web provides a full usable application to renderer your modeler in a browser and it is based on sirius-components which can be used to create your own application, or just intagrate some of them, or even integrate this in a Cloud IDE like Theia. EMF.Cloud/GLSP are just components you do not have all you need to create a full domain specific studio. Development of Sirius products : not sure to understand your question here, for this first release we focused on the end-user side and so rely on the existing Sirius tools to develop Sirius based application (using EMF metamodel, EMF.edit, defining odesign in Eclipse). Beginning of next year we will work on bringing the metamodelisation side to the web (metamodel definition like ecoretools, sirius definition, and ease the deployment...)}
}

@online{merksMerksMeanderingsEMF2007,
  title = {Merks' {{Meanderings}}: {{Is EMF}} Going to Replace {{MOF}}?},
  shorttitle = {Merks' {{Meanderings}}},
  author = {Merks, Ed},
  date = {2007-10-05},
  url = {https://ed-merks.blogspot.com/2007/10/is-emf-going-to-replace-mof.html},
  urldate = {2020-11-11},
  file = {C\:\\Users\\krire\\Zotero\\storage\\EUKSQTXD\\is-emf-going-to-replace-mof.html},
  keywords = {ecore,emf,emof,mof},
  organization = {{Merks' Meanderings}}
}

@online{microsoftActivationEvents2020,
  title = {Activation {{Events}}},
  author = {{Microsoft}},
  date = {2020-10-08},
  url = {https://code.visualstudio.com/api/references/activation-events},
  urldate = {2020-10-30},
  abstract = {To support lazy activation of Visual Studio Code extensions (plug-ins), your extension controls when it should be loaded through a set of Activation Events.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\AVSHW53J\\activation-events.html},
  keywords = {extension,vscode},
  langid = {english}
}

@online{microsoftContributionPoints2020,
  title = {Contribution {{Points}}},
  author = {{Microsoft}},
  date = {2020-10-08},
  url = {https://code.visualstudio.com/api/references/contribution-points},
  urldate = {2020-10-29},
  abstract = {To extend Visual Studio Code, your extension (plug-in) declares which of the various Contribution Points it is using in its package.json Extension Manifest file.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\WAJ8YRS6\\contribution-points.html},
  keywords = {extension,vscode},
  langid = {english},
  organization = {{Contribution Points}}
}

@online{microsoftExtendingWorkbench2020,
  title = {Extending {{Workbench}}},
  author = {{Microsoft}},
  date = {2020-10-08},
  url = {https://code.visualstudio.com/api/extension-capabilities/extending-workbench},
  urldate = {2020-10-29},
  abstract = {Explain how to extend Visual Studio Code's workbench area with custom UI components},
  file = {C\:\\Users\\krire\\Zotero\\storage\\HUD7U3AN\\extending-workbench.html},
  keywords = {extension,vscode},
  langid = {english}
}

@online{microsoftExtensionAnatomy2020,
  title = {Extension {{Anatomy}}},
  author = {{Microsoft}},
  date = {2020-11-06},
  url = {https://code.visualstudio.com/api/get-started/extension-anatomy},
  urldate = {2020-12-06},
  abstract = {Explain the structure of a Visual Studio Code extension (plug-in)},
  file = {C\:\\Users\\krire\\Zotero\\storage\\Y75WGU7W\\extension-anatomy.html},
  langid = {english}
}

@online{microsoftExtensionHost2020,
  title = {Extension {{Host}}},
  author = {{Microsoft}},
  date = {2020-11-06},
  url = {https://code.visualstudio.com/api/advanced-topics/extension-host},
  urldate = {2020-12-06},
  abstract = {The Visual Studio Code Extension Host is responsible for managing extensions and ensuring the stability and performance of Visual Studio Code.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\QYCZ47TW\\extension-host.html},
  keywords = {docs,extension,vscode},
  langid = {english}
}

@online{microsoftExtensionsCapabilitiesOverview2020,
  title = {Extensions {{Capabilities Overview}}},
  author = {{Microsoft}},
  date = {2020-11-06},
  url = {https://code.visualstudio.com/api/extension-capabilities/overview},
  urldate = {2020-12-06},
  abstract = {Learn the details of what's possible with Visual Studio Code's rich extension (plug-in) API.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\S2SJX4WP\\overview.html},
  keywords = {docs,extension,vscode},
  langid = {english}
}

@online{microsoftLanguageServerExtension2020,
  title = {Language {{Server Extension Guide}}},
  shorttitle = {Language {{Server Extension Guide}}},
  author = {{Microsoft}},
  date = {2020-09-10},
  url = {https://code.visualstudio.com/api/language-extensions/language-server-extension-guide},
  urldate = {2020-09-23},
  abstract = {Learn how to create Language Servers to provide rich language features in Visual Studio Code.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\8HW5NFWW\\language-server-extension-guide.html},
  keywords = {LSP},
  langid = {english},
  organization = {{Language Server Extension Guide}}
}

@online{microsoftLanguageServerProtocol2020,
  title = {Language {{Server Protocol Specification}} - 3.15},
  shorttitle = {{{LSP}} Specification},
  author = {{Microsoft}},
  date = {2020-01-14},
  url = {https://microsoft.github.io/language-server-protocol/specifications/specification-current/},
  urldate = {2020-09-23},
  abstract = {This document describes the 3.15.x version of the language server protocol.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\KMW4QJ65\\specification-current.html},
  langid = {english},
  organization = {{Language Server Protocol Specification - 3.15}}
}

@online{microsoftOverview,
  title = {Overview},
  author = {{Microsoft}},
  url = {https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/},
  urldate = {2020-12-07},
  file = {C\:\\Users\\krire\\Zotero\\storage\\P2Q5ZDVX\\overview.html},
  keywords = {lsp,overview},
  organization = {{LSP/LSIF}}
}

@online{microsoftProgrammaticLanguageFeatures2020,
  title = {Programmatic {{Language Features}}},
  shorttitle = {Programmatic {{Language Features}}},
  author = {{Microsoft}},
  date = {2020-09-10},
  url = {https://code.visualstudio.com/api/language-extensions/programmatic-language-features},
  urldate = {2020-09-23},
  abstract = {Visual Studio Code language extensions contribute programming language features. These guidelines present the language features available in Visual Studio Code and explain the API.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\8W2U9E4H\\programmatic-language-features.html},
  keywords = {docs,guide,LSP,vscode},
  langid = {english},
  organization = {{Programmatic Language Features}}
}

@online{microsoftPublishingExtensions2020,
  title = {Publishing {{Extensions}}},
  author = {{Microsoft}},
  date = {2020-10-08},
  url = {https://code.visualstudio.com/api/working-with-extensions/publishing-extension},
  urldate = {2020-10-30},
  abstract = {Learn how to publish Visual Studio Code extensions to the public Marketplace and share them with other developers.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\QDXQ48GR\\publishing-extension.html},
  keywords = {extension,publishing,vscode},
  langid = {english}
}

@online{microsoftVisualStudioCode2020,
  title = {Visual {{Studio Code User Interface}}},
  author = {{Microsoft}},
  date = {2020-10-08},
  url = {https://code.visualstudio.com/docs/getstarted/userinterface},
  urldate = {2020-10-29},
  abstract = {A quick overview of the Visual Studio Code user interface. Learn about the editor, window management, and special UI to handle source control, extension management, full text search and more.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\TG7I3KDH\\userinterface.html},
  keywords = {vscode},
  langid = {english}
}

@online{MicrosoftVscode,
  title = {Microsoft/Vscode},
  url = {https://github.com/microsoft/vscode},
  urldate = {2020-12-06},
  abstract = {Visual Studio Code. Contribute to microsoft/vscode development by creating an account on GitHub.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\JPX5KIBI\\Source-Code-Organization.html},
  keywords = {architecture,vscode},
  langid = {english},
  organization = {{GitHub}}
}

@software{MicrosoftVscode2020,
  title = {Microsoft/Vscode},
  date = {2020-12-06T18:03:24Z},
  origdate = {2015-09-03T20:23:38Z},
  url = {https://github.com/microsoft/vscode},
  urldate = {2020-12-06},
  abstract = {Visual Studio Code. Contribute to microsoft/vscode development by creating an account on GitHub.},
  keywords = {editor,electron,github,microsoft,typescript,visual-studio-code,vscode},
  organization = {{Microsoft}}
}

@online{microsoftVSCodeAPI2020,
  title = {{{VS Code API}}},
  author = {{Microsoft}},
  date = {2020-11-06},
  url = {https://code.visualstudio.com/api/references/vscode-api},
  urldate = {2020-11-11},
  abstract = {Visual Studio Code extensions (plug-in) API Reference.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\IY6FU7E4\\vscode-api.html},
  keywords = {api,extension,vscode},
  langid = {english}
}

@online{MicrosoftVscodeextensionsamples,
  title = {Microsoft/Vscode-Extension-Samples},
  url = {https://github.com/microsoft/vscode-extension-samples},
  urldate = {2020-09-29},
  abstract = {Sample code illustrating the VS Code extension API. - microsoft/vscode-extension-samples},
  file = {C\:\\Users\\krire\\Zotero\\storage\\QX6ZIQYB\\custom-editor-sample.html},
  keywords = {vscode},
  langid = {english},
  organization = {{GitHub}}
}

@software{MicrosoftVscodelanguageservernode2021,
  title = {Microsoft/Vscode-Languageserver-Node},
  date = {2021-03-08T06:39:44Z},
  origdate = {2015-09-03T13:39:52Z},
  url = {https://github.com/microsoft/vscode-languageserver-node},
  urldate = {2021-03-08},
  abstract = {Language server protocol implementation for VSCode. This allows implementing language services in JS/TS running on node.js},
  keywords = {json-rpc,lsp,vscode},
  organization = {{Microsoft}}
}

@online{microsoftWebviewAPI2020,
  title = {Webview {{API}}},
  author = {{Microsoft}},
  date = {2020-11-06},
  url = {https://code.visualstudio.com/api/extension-guides/webview},
  urldate = {2020-10-30},
  abstract = {Use the Webview API to create fully customizable views within Visual Studio Code.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\9G8IGEVQ\\webview.html},
  langid = {english}
}

@online{microsoftWhatLanguageServer,
  title = {What Is the {{Language Server Protocol}}?},
  shorttitle = {Overview},
  author = {{Microsoft}},
  url = {https://microsoft.github.io//language-server-protocol/overviews/lsp/overview/},
  urldate = {2020-09-23},
  file = {C\:\\Users\\krire\\Zotero\\storage\\9TARARJN\\overview.html},
  keywords = {LSP},
  langid = {english},
  organization = {{What is the Language Server Protocol?}}
}

@online{microsoftYourFirstExtension2020,
  title = {Your {{First Extension}}},
  author = {{Microsoft}},
  date = {2020-10-08},
  url = {https://code.visualstudio.com/api/get-started/your-first-extension},
  urldate = {2020-10-30},
  abstract = {Create your first Visual Studio Code extension (plug-in) with a simple Hello World example.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\VPFBRF9X\\your-first-extension.html},
  keywords = {extension,vscode},
  langid = {english}
}

@online{mikelinksvayerStartingOpenSource2020,
  title = {Starting an {{Open Source Project}}},
  author = {{Mike Linksvayer} and {Mike McQuaid} and {Justin Kenyon} and {Katrin Leinweber} and {Sophie Shepherd} and {John Mueller} and {Emil Laine} and {Andrew Lee}},
  date = {2020-12-16},
  url = {https://opensource.guide/starting-a-project/},
  urldate = {2021-05-20},
  abstract = {Learn more about the world of open source and get ready to launch your own project.},
  annotation = {https://github.com/github/opensource.guide/blob/main/\_articles/starting-a-project.md},
  file = {C\:\\Users\\krire\\Zotero\\storage\\HAJXSQPB\\starting-a-project.html},
  keywords = {checklist,open source},
  langid = {english},
  organization = {{Open Source Guides}}
}

@online{MultiLanguageIDEImplemented2017,
  title = {Multi-{{Language IDE}} Implemented in {{JS Scope}} and {{Architecture}}},
  shorttitle = {Multi-{{Language IDE}}},
  date = {2017},
  url = {https://docs.google.com/document/d/1aodR1LJEF_zu7xBis2MjpHRyv7JKJzW7EWI9XRYCt48/edit?usp=embed_facebook},
  urldate = {2020-09-17},
  abstract = {Multi-Language IDE Implemented in JS  Scope and Architecture Overview This document details the scope of the IDE framework implemented in JavaScript, HTML and CSS.  It also details the architecture choices that will guide the development of the software. Scope The Javascript IDE project has the ...},
  file = {C\:\\Users\\krire\\Zotero\\storage\\NT8FRKC8\\edit.html},
  keywords = {architecture,design document,scope,theia},
  langid = {english},
  organization = {{Google Docs}}
}

@online{neilmackenzieSiriusWebXText2020,
  title = {Sirius {{Web}} and {{XText}}},
  shorttitle = {Eclipse {{Community Forums}}},
  author = {{Neil Mackenzie} and {Mélanie Bats}},
  date = {2020-09-24},
  url = {https://www.eclipse.org/forums/index.php/t/1105347/},
  urldate = {2020-10-06},
  abstract = {The Eclipse Foundation - home to a global community, the Eclipse IDE, Jakarta EE and over 350 open source projects, including runtimes, tools and frameworks.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\EV5Y3WZH\\1105347.html},
  langid = {english}
}

@inproceedings{nuseibehRequirementsEngineeringRoadmap2000,
  title = {Requirements Engineering: A Roadmap},
  shorttitle = {Requirements Engineering},
  author = {Nuseibeh, Bashar and Easterbrook, Steve},
  date = {2000-01-01},
  pages = {35--46},
  file = {C\:\\Users\\krire\\Zotero\\storage\\NF7TV5FZ\\Nuseibeh and Easterbrook - 2000 - Requirements engineering a roadmap.pdf}
}

@online{obeoEclipseSiriusOpensource,
  title = {Eclipse {{Sirius}} - {{Open}}-Source Domain-Specific Modeling - {{Obeo Designer}}},
  author = {{Obeo}},
  url = {https://www.obeodesigner.com/en/product/sirius},
  urldate = {2020-10-06},
  file = {C\:\\Users\\krire\\Zotero\\storage\\SN3SQLL6\\sirius.html},
  organization = {{Eclipse Sirius}}
}

@online{ObeoFewWords,
  title = {Obeo into a Few Words - {{Obeo}}},
  url = {https://www.obeo.fr/en/company},
  urldate = {2020-12-09},
  file = {C\:\\Users\\krire\\Zotero\\storage\\C7HSIBSP\\company.html},
  keywords = {actor,obeo}
}

@online{obeoGraphicalServerProtocol,
  title = {{{GraphicalServerProtocol}}},
  author = {{Obeo}},
  url = {https://obeonetwork.github.io/GraphicalServerProtocol/},
  urldate = {2020-10-05},
  abstract = {Graphical Server Protocol},
  file = {C\:\\Users\\krire\\Zotero\\storage\\RQC57YVN\\GraphicalServerProtocol.html},
  langid = {english},
  organization = {{GraphicalServerProtocol}}
}

@online{ObeoProductsPresentation,
  title = {Obeo Products Presentation - {{Obeo}}},
  url = {https://www.obeo.fr/en/products},
  urldate = {2020-12-09},
  file = {C\:\\Users\\krire\\Zotero\\storage\\8RWCJZGF\\products.html}
}

@inproceedings{ortizBuildingServersideWeb2010,
  title = {Building Server-Side Web Language Processors},
  booktitle = {Proceedings of the 41st {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Ortiz, Ariel},
  date = {2010-03-10},
  pages = {2--6},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1734263.1734267},
  url = {https://doi.org/10.1145/1734263.1734267},
  urldate = {2021-02-03},
  abstract = {This paper discusses some useful insights for instructors who might want to consider using a web approach in courses involving language design and implementation. The basic idea is to have students build a language processor that actually runs on the web, instead of a processor that just runs on a command-line shell. The author documents the advantages and possible shortcomings of this approach, as well as his class experiences.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\A5UHAKAG\\Ortiz - 2010 - Building server-side web language processors.pdf},
  isbn = {978-1-4503-0006-3},
  keywords = {compilers,interpreters,language processor,programming languages,server side,web,web development,web frameworks},
  series = {{{SIGCSE}} '10}
}

@online{paulmarechalTheiaPluginImplementation2020,
  title = {Theia {{Plugin Implementation}}},
  author = {{Paul Maréchal}},
  date = {2020-11-10},
  url = {https://github.com/eclipse-theia/theia/wiki/Theia-Plugin-Implementation},
  urldate = {2020-12-06},
  abstract = {Eclipse Theia is a cloud \& desktop IDE framework implemented in TypeScript. - eclipse-theia/theia},
  file = {C\:\\Users\\krire\\Zotero\\storage\\NFYHJW9X\\Theia-Plugin-Implementation.html},
  keywords = {plugin,rpc,theia,wiki},
  langid = {english},
  organization = {{GitHub}}
}

@article{peffersDesignScienceResearch2007,
  title = {A {{Design Science Research Methodology}} for {{Information Systems Research}}},
  author = {Peffers, Ken and Tuunanen, Tuure and Rothenberger, Marcus A. and Chatterjee, Samir},
  date = {2007-12-01},
  journaltitle = {Journal of Management Information Systems},
  volume = {24},
  pages = {45--77},
  publisher = {{Routledge}},
  issn = {0742-1222},
  doi = {10.2753/MIS0742-1222240302},
  url = {https://doi.org/10.2753/MIS0742-1222240302},
  urldate = {2021-02-16},
  abstract = {The paper motivates, presents, demonstrates in use, and evaluates a methodology for conducting design science (DS) research in information systems (IS). DS is of importance in a discipline oriented to the creation of successful artifacts. Several researchers have pioneered DS research in IS, yet over the past 15 years, little DS research has been done within the discipline. The lack of a methodology to serve as a commonly accepted framework for DS research and of a template for its presentation may have contributed to its slow adoption. The design science research methodology (DSRM) presented here incorporates principles, practices, and procedures required to carry out such research and meets three objectives: it is consistent with prior literature, it provides a nominal process model for doing DS research, and it provides a mental model for presenting and evaluating DS research in IS. The DS process includes six steps: problem identification and motivation, definition of the objectives for a solution, design and development, demonstration, evaluation, and communication. We demonstrate and evaluate the methodology by presenting four case studies in terms of the DSRM, including cases that present the design of a database to support health assessment methods, a software reuse measure, an Internet video telephony application, and an IS planning method. The designed methodology effectively satisfies the three objectives and has the potential to help aid the acceptance of DS research in the IS discipline.},
  annotation = {\_eprint: https://doi.org/10.2753/MIS0742-1222240302},
  file = {C\:\\Users\\krire\\Zotero\\storage\\LD5PUDFE\\Peffers et al. - 2007 - A Design Science Research Methodology for Informat.pdf;C\:\\Users\\krire\\Zotero\\storage\\JDQKT6EC\\MIS0742-1222240302.html},
  keywords = {case study,design science,design science research,design theory,dsrm,mental model,methodology,process model,research},
  number = {3}
}

@online{philiplangerEclipseglspGlspPROTOCOL2020,
  title = {Eclipse-Glsp/Glsp {{PROTOCOL}}.Md},
  author = {{Philip Langer} and {Martin Fleck} and {Tobias Ortmayr}},
  date = {2020-12-01},
  url = {https://github.com/eclipse-glsp/glsp},
  urldate = {2020-12-07},
  abstract = {Graphical language server platform for building web-based diagram editors - eclipse-glsp/glsp},
  file = {C\:\\Users\\krire\\Zotero\\storage\\9H64NAFQ\\PROTOCOL.html},
  langid = {english},
  organization = {{GitHub}}
}

@software{philiplangerEclipseglspGlspserver,
  title = {Eclipse-Glsp/Glsp-Server},
  author = {{Philip Langer} and {Tobias Ortmayr} and {Martin Fleck}},
  url = {https://github.com/eclipse-glsp/glsp-server},
  urldate = {2020-10-05},
  abstract = {Java-based server framework of the graphical language server platform - eclipse-glsp/glsp-server},
  file = {C\:\\Users\\krire\\Zotero\\storage\\VD49JGLX\\kind.html},
  version = {144ff21}
}

@unpublished{philiplangerWebbasedModelingTools2020,
  title = {Web-Based Modeling Tools with {{EMF}}.Cloud (Published to the Web)},
  author = {{Philip Langer} and {Maximilian Koegel}},
  date = {2020-10-22},
  url = {https://docs.google.com/presentation/d/e/2PACX-1vRVnzfSELGwVrZNk5kfSKXtM5Te9hIbzPpnIoi40IEn7QzwFF3pAaXDtq1bg18RS5X1YfHZ1Xr1qb6K/pub?start=false&loop=false&delayms=3000&usp=embed_facebook},
  urldate = {2020-12-08},
  abstract = {Web-based modeling tools with EMF.cloud Philip Langer \& Maximilian Koegel EclipseSource},
  eventtitle = {{{EclipseCon}} 2020},
  file = {C\:\\Users\\krire\\Zotero\\storage\\TLNE83VJ\\pub.html},
  keywords = {coffee},
  langid = {english},
  venue = {{Internet (virtual)}}
}

@incollection{puraoIntegratingActionResearch2010,
  title = {On {{Integrating Action Research}} and {{Design Research}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Purao, Sandeep and Rossi, Matti and Sein, Maung K.},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {179--194},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_13},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_13},
  urldate = {2021-02-16},
  abstract = {IS research has been criticized for having little influence on practice. One approach to achieving more relevance is to conduct research using appropriate research methods that balance the interests of both researchers and practitioners. This chapter examines the similarities between two methods that address this mandate by adopting a proactive stance to investigating information systems in organizations. These two approaches, action research and design research, both directly intervene in “real-world” domains and effect changes in these domains. We investigate these similarities by examining exemplars of each type of research according to the criteria of the other. Our analysis reveals interesting parallels and similarities between the two suggesting that the two approaches have much to learn from each other. Based on our analysis, we propose ways to facilitate integration of the two approaches that we believe will be useful for both and for IS research in general.},
  isbn = {978-1-4419-5653-8},
  keywords = {Design Research,Functional Prototype,International Joint Venture,Proactive Stance,Software Process Improvement},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@inproceedings{quinteroHowFaceTop2012,
  ids = {quinteroHowFaceTop2012a},
  title = {How Face the Top {{MDE}} Adoption Problems},
  booktitle = {2012 {{XXXVIII Conferencia Latinoamericana En Informatica}} ({{CLEI}})},
  author = {Quintero, J. and Rucinque, P. and Anaya, R. and Piedrahita, G.},
  date = {2012-10},
  pages = {1--10},
  doi = {10.1109/CLEI.2012.6427225},
  abstract = {Model Driven Engineering (MDE) refers to the creation and manipulation of models in the end-to-end application lifecycle. When adopting a model-based development approach many challenges arise, some of these are related to the immaturity of the methods and tools that support this paradigm. This paper presents an exploratory case study developed to analyze how the renowned MDE technology solutions contribute to face the adoption problems. The case study consisted of developing a Web application for an incident management process based on ITIL (Information Technology Infrastructure Library) using tools from three different MDE approximations: MDA, MDSD, and BPM. As a result of our study, we suggest different strategies to help practitioners face the top MDE adoption problems.},
  eventtitle = {2012 {{XXXVIII Conferencia Latinoamericana En Informatica}} ({{CLEI}})},
  file = {C\:\\Users\\krire\\Zotero\\storage\\48FUZFTA\\Quintero et al. - 2012 - How face the top MDE adoption problems.pdf;C\:\\Users\\krire\\Zotero\\storage\\5XCMFWJI\\Quintero et al. - 2012 - How face the top MDE adoption problems.pdf;C\:\\Users\\krire\\Zotero\\storage\\PE45G7T5\\6427225.html;C\:\\Users\\krire\\Zotero\\storage\\VKHX5T6R\\6427225.html},
  keywords = {adoption,BPM,Buildings,Business,challenges,Educational institutions,end-to-end application lifecycle,Graphical user interfaces,incident management process,Information Technology Infrastructure Library,ITIL,MDA,MDE,MDE adoption problems,MDSD,Measurement,model driven engineering,model-based development approach,Software,software engineering,software management,Unified modeling language,Web application}
}

@online{ReasonsWhyModelDriven,
  title = {8 {{Reasons Why Model}}-{{Driven Approaches}} (Will) {{Fail}}},
  url = {https://www.infoq.com/articles/8-reasons-why-MDE-fails/},
  urldate = {2020-11-18},
  abstract = {If you want to start building software in a model-driven way you’ll need to devise some methodology based on ideas and practical experiences from others. In this article, Johan shares with us 8 gotchas of Model Driven Engineering. The article contains a rich set of references to help you go further in your investigations.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\2M23I62M\\8-reasons-why-MDE-fails.html},
  keywords = {adoption,tooling},
  langid = {english},
  organization = {{InfoQ}}
}

@online{RedhatdeveloperVscodejava,
  title = {Redhat-Developer/Vscode-Java},
  url = {https://github.com/redhat-developer/vscode-java},
  urldate = {2021-03-08},
  abstract = {Java Language Support for Visual Studio Code. Contribute to redhat-developer/vscode-java development by creating an account on GitHub.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\RZ66VZ9S\\protocol.html},
  keywords = {java,json-rpc,lsp,vscode},
  langid = {english},
  organization = {{GitHub}}
}

@online{redhatWorldOpenSource,
  title = {The World's Open Source Leader},
  author = {{RedHat}},
  url = {https://www.redhat.com/en},
  urldate = {2020-12-09},
  abstract = {Red Hat is the world’s leading provider of open source solutions, using a community-powered approach to provide reliable and high-performing cloud, virtualization, storage, Linux, and middleware technologies. Red Hat also offers award-winning support, training, and consulting services. Red Hat is an S\&P 500 company with more than 80 offices spanning the globe, empowering its customers’ businesses.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\PZHVTTL9\\en.html},
  langid = {english}
}

@thesis{rekstadModelingEnvironmentCloud2020,
  title = {A {{Modeling Environment}} in the {{Cloud}} for {{Education}}},
  author = {Rekstad, Kristian},
  date = {2020-12-09},
  institution = {{Norwegian University of Science and Technology}},
  location = {{Trondheim, Norway}},
  abstract = {Model-Driven Development is a an approach to software engineering. A common framework for Model-Driven Development (MDD) is the Eclipse Modeling Framework. However, students resist learning it because of its use of unpopular technologies. This thesis comes before a master’s thesis, and looks at how modeling can be moved to cloud based editors in order to renew the technology stack. At the same time, opportunities for saving effort are found, by reusing existing implementations, architectures and protocols from other tools. This thesis ends by finding the need for a tree based editor, and testing the feasibility of it. Finally, some requirements and an architecture for such an editor are found. These can be further studied and implemented in a master’s thesis.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\ZMUWIMUV\\Rekstad - A Modeling Environment in the Cloud for Education.pdf},
  langid = {english},
  pagetotal = {81},
  type = {Pre-project}
}

@article{rodriguesdasilvaModeldrivenEngineeringSurvey2015,
  title = {Model-Driven Engineering: {{A}} Survey Supported by the Unified Conceptual Model},
  shorttitle = {Model-Driven Engineering},
  author = {Rodrigues da Silva, Alberto},
  date = {2015-10-01},
  journaltitle = {Computer Languages, Systems \& Structures},
  shortjournal = {Computer Languages, Systems \& Structures},
  volume = {43},
  pages = {139--155},
  issn = {1477-8424},
  doi = {10.1016/j.cl.2015.06.001},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842415000408},
  urldate = {2020-11-18},
  abstract = {During the last decade a new trend of approaches has emerged, which considers models not just documentation artefacts, but also central artefacts in the software engineering field, allowing the creation or automatic execution of software systems starting from those models. These proposals have been classified generically as Model-Driven Engineering (MDE) and share common concepts and terms that need to be abstracted, discussed and understood. This paper presents a survey on MDE based on a unified conceptual model that clearly identifies and relates these essential concepts, namely the concepts of system, model, metamodel, modeling language, transformations, software platform, and software product. In addition, this paper discusses the terminologies relating MDE, MDD, MDA and others. This survey is based on earlier work, however, contrary to those, it intends to give a simple, broader and integrated view of the essential concepts and respective terminology commonly involved in the MDE, answering to key questions such as: What is a model? What is the relation between a model and a metamodel? What are the key facets of a modeling language? How can I use models in the context of a software development process? What are the relations between models and source code artefacts and software platforms? and What are the relations between MDE, MDD, MDA and other MD approaches?},
  file = {C\:\\Users\\krire\\Zotero\\storage\\NCZZ5BWH\\Rodrigues da Silva - 2015 - Model-driven engineering A survey supported by th.pdf;C\:\\Users\\krire\\Zotero\\storage\\5IE3XVLK\\S1477842415000408.html},
  keywords = {Metamodel,Model,Model-driven approaches,Model-driven engineering,Modeling language,Software system},
  langid = {english}
}

@inproceedings{rodriguez-echeverriaLanguageServerProtocol2018,
  title = {Towards a {{Language Server Protocol Infrastructure}} for {{Graphical Modeling}}},
  booktitle = {Proceedings of the 21th {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}},
  author = {Rodriguez-Echeverria, Roberto and Izquierdo, Javier Luis Cánovas and Wimmer, Manuel and Cabot, Jordi},
  date = {2018-10-14},
  pages = {370--380},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3239372.3239383},
  url = {https://doi.org/10.1145/3239372.3239383},
  urldate = {2020-11-26},
  abstract = {The development of modern IDEs is still a challenging and time-consuming task, which requires implementing the support for language-specific features such as syntax highlighting or validation. When the IDE targets a graphical language, its development becomes even more complex due to the rendering and manipulation of the graphical notation symbols. To simplify the development of IDEs, the Language Server Protocol (LSP) proposes a decoupled approach based on language-agnostic clients and language-specific servers. LSP clients communicate changes to LSP servers, which validate and store language instances. However, LSP only addresses textual languages (i.e., character as atomic unit) and neglects the support for graphical ones (i.e., nodes/edges as atomic units). In this paper, we present our vision to decouple graphical language IDEs discussing the alternatives for integrating LSP's ideas in their development. Moreover, we propose a novel LSP infrastructure to simplify the development of new graphical modeling tools, in which Web technologies may be used for editor front-ends while leveraging existing modeling frameworks to build language servers.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\A75L2EW6\\Rodriguez-Echeverria et al. - 2018 - Towards a Language Server Protocol Infrastructure .pdf},
  isbn = {978-1-4503-4949-9},
  keywords = {Domain Specific Languages,glsp,Language Server Protocol,lsp,mdd,Modeling Editors},
  series = {{{MODELS}} '18}
}

@inproceedings{rodriguez-echeverriaLanguageServerProtocol2018a,
  title = {Towards a {{Language Server Protocol Infrastructure}} for {{Graphical Modeling}}},
  booktitle = {Proceedings of the 21th {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}},
  author = {Rodriguez-Echeverria, Roberto and Izquierdo, Javier Luis Cánovas and Wimmer, Manuel and Cabot, Jordi},
  date = {2018-10-14},
  pages = {370--380},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3239372.3239383},
  url = {https://doi.org/10.1145/3239372.3239383},
  urldate = {2021-02-03},
  abstract = {The development of modern IDEs is still a challenging and time-consuming task, which requires implementing the support for language-specific features such as syntax highlighting or validation. When the IDE targets a graphical language, its development becomes even more complex due to the rendering and manipulation of the graphical notation symbols. To simplify the development of IDEs, the Language Server Protocol (LSP) proposes a decoupled approach based on language-agnostic clients and language-specific servers. LSP clients communicate changes to LSP servers, which validate and store language instances. However, LSP only addresses textual languages (i.e., character as atomic unit) and neglects the support for graphical ones (i.e., nodes/edges as atomic units). In this paper, we present our vision to decouple graphical language IDEs discussing the alternatives for integrating LSP's ideas in their development. Moreover, we propose a novel LSP infrastructure to simplify the development of new graphical modeling tools, in which Web technologies may be used for editor front-ends while leveraging existing modeling frameworks to build language servers.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\SAPZXMMK\\Rodriguez-Echeverria et al. - 2018 - Towards a Language Server Protocol Infrastructure .pdf},
  isbn = {978-1-4503-4949-9},
  keywords = {Domain Specific Languages,glsp,graphical editor,Language Server Protocol,lsp,Modeling Editors},
  series = {{{MODELS}} '18}
}

@inproceedings{sainiWebCollaborativeModelling2019,
  title = {Towards Web Collaborative Modelling for the User Requirements Notation Using Eclipse Che and Theia {{IDE}}},
  booktitle = {Proceedings of the 11th {{International Workshop}} on {{Modelling}} in {{Software Engineerings}}},
  author = {Saini, Rijul and Bali, Shivani and Mussbacher, Gunter},
  date = {2019-05-26},
  pages = {15--18},
  publisher = {{IEEE Press}},
  location = {{Montreal, Quebec, Canada}},
  doi = {10.1109/MiSE.2019.00010},
  url = {https://doi.org/10.1109/MiSE.2019.00010},
  urldate = {2020-11-26},
  abstract = {Collaborative modelling has become a necessity when developing a complex system or in a team of modellers with a diverse set of expertise. Textual notations have a long history in software engineering because of their fast editing style, simple usage, and scalability. Therefore, we propose a novel collaborative modelling framework for the graphical User Requirements Notation (URN) which we call tColab. It uses the text-based TGRL (Textual Goal-oriented Requirement Language) to build URN goal models and then automatically generates corresponding graphical models. This framework is based on the architecture of Eclipse Che and Theia. On one side, Theia provides support for LSP (Language Server Protocol) so that textual models can be built and their corresponding graphical models can be generated in a browser IDE (Integrated Development Environment). On the other hand, Eclipse Che adds support for collaboration where multiple modellers can contribute to building the textual models in an online collaborative manner. This initiative aims to replace the jUCMNAV tool, which is the most comprehensive URN modelling tool to date but only supports a single user.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\P2EJTI2G\\Saini et al. - 2019 - Towards web collaborative modelling for the user r.pdf},
  keywords = {cloud,eclipse che,ELK,jUCMNav,LSP,sprotty,TGRL,theia,TURN,URN,user requirements notation},
  series = {{{MiSE}} '19}
}

@inproceedings{sainiWebCollaborativeModelling2019a,
  title = {Towards Web Collaborative Modelling for the User Requirements Notation Using Eclipse Che and Theia {{IDE}}},
  booktitle = {Proceedings of the 11th {{International Workshop}} on {{Modelling}} in {{Software Engineerings}}},
  author = {Saini, Rijul and Bali, Shivani and Mussbacher, Gunter},
  date = {2019-05-26},
  pages = {15--18},
  publisher = {{IEEE Press}},
  location = {{Montreal, Quebec, Canada}},
  doi = {10.1109/MiSE.2019.00010},
  url = {https://doi.org/10.1109/MiSE.2019.00010},
  urldate = {2021-02-03},
  abstract = {Collaborative modelling has become a necessity when developing a complex system or in a team of modellers with a diverse set of expertise. Textual notations have a long history in software engineering because of their fast editing style, simple usage, and scalability. Therefore, we propose a novel collaborative modelling framework for the graphical User Requirements Notation (URN) which we call tColab. It uses the text-based TGRL (Textual Goal-oriented Requirement Language) to build URN goal models and then automatically generates corresponding graphical models. This framework is based on the architecture of Eclipse Che and Theia. On one side, Theia provides support for LSP (Language Server Protocol) so that textual models can be built and their corresponding graphical models can be generated in a browser IDE (Integrated Development Environment). On the other hand, Eclipse Che adds support for collaboration where multiple modellers can contribute to building the textual models in an online collaborative manner. This initiative aims to replace the jUCMNAV tool, which is the most comprehensive URN modelling tool to date but only supports a single user.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\6GEKCF4R\\Saini et al. - 2019 - Towards web collaborative modelling for the user r.pdf},
  keywords = {che,collaborative modelling,eclipse che,ELK,jUCMNav,LSP,sprotty,TGRL,theia,TURN,URN,user requirements notation},
  series = {{{MiSE}} '19}
}

@online{SIRIUSIIMissionMelBlog,
  title = {{{SIRIUS}}-{{II Mission}} - {{MelBlog}}},
  url = {http://melb.enix.org/2020/08/18/siriusiimission/},
  urldate = {2020-10-06},
  file = {C\:\\Users\\krire\\Zotero\\storage\\RVDHGHY9\\siriusiimission.html},
  keywords = {eclipse,obeo,sirius}
}

@online{smithEclipseSprotty2018,
  title = {Eclipse {{Sprotty}}},
  author = {Smith, Cydnie},
  date = {2018-08-01T13:30:29-04:00},
  url = {https://projects.eclipse.org/projects/ecd.sprotty},
  urldate = {2020-12-06},
  abstract = {Eclipse Sprotty is a next-generation, open-source, web-based diagramming framework.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\WUSWZ4DB\\ecd.html},
  keywords = {sprotty},
  langid = {english},
  organization = {{projects.eclipse.org}},
  type = {Text}
}

@online{SphinxArchitectureEclipsepedia,
  title = {Sphinx/Architecture - {{Eclipsepedia}}},
  url = {https://wiki.eclipse.org/Sphinx/architecture},
  urldate = {2021-01-25},
  file = {C\:\\Users\\krire\\Zotero\\storage\\ICSPZTPX\\architecture.html},
  keywords = {eclipse,model server,sphinx}
}

@online{stackoverflowStackOverflowDeveloper2019,
  title = {Stack {{Overflow Developer Survey}} 2019},
  author = {{StackOverflow}},
  date = {2019},
  url = {https://insights.stackoverflow.com/survey/2019/?utm_source=social-share&utm_medium=social&utm_campaign=dev-survey-2019},
  urldate = {2020-12-07},
  abstract = {Nearly 90,000 took this comprehensive, annual survey of people who code. Demographics. Most loved, dreaded and wanted technologies. Salary and careers.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\4QZMD92D\\2019.html},
  keywords = {popularity,stack overflow,survey},
  organization = {{Stack Overflow}}
}

@inproceedings{steimannRobustProjectionalEditing2017,
  title = {Robust Projectional Editing},
  booktitle = {Proceedings of the 10th {{ACM SIGPLAN International Conference}} on {{Software Language Engineering}} - {{SLE}} 2017},
  author = {Steimann, Friedrich and Frenkel, Marcus and Voelter, Markus},
  date = {2017},
  pages = {79--90},
  publisher = {{ACM Press}},
  location = {{Vancouver, BC, Canada}},
  doi = {10.1145/3136014.3136034},
  url = {http://dl.acm.org/citation.cfm?doid=3136014.3136034},
  urldate = {2020-11-14},
  abstract = {While contemporary projectional editors make sure that the edited programs conform to the programming language’s metamodel, they do not enforce that they are also wellformed, that is, that they obey the well-formedness rules defined for the language. We show how, based on a constraintbased capture of well-formedness, projectional editors can be empowered to enforce well-formedness in much the same way they enforce conformance with the metamodel. The resulting robust edits may be more complex than ordinary, well-formedness breaking edits, and hence may require more user involvement; yet, maintaining well-formedness at all times ensures that necessary corrections of a program are linked to the edit that necessitated them, and that the projectional editor’s services are never compromised by inconsistent programs. Robust projectional editing is not a straitjacket, however: If a programmer prefers to work without it, its constraint-based capture of well-formedness will still catch all introduced errors Ð unlike many other editor services, well-formedness checking and robust editing are based on the same implementation, and are hence guaranteed to behave consistently.},
  eventtitle = {The 10th {{ACM SIGPLAN International Conference}}},
  file = {C\:\\Users\\krire\\Zotero\\storage\\VFXWUTDZ\\Steimann et al. - 2017 - Robust projectional editing.pdf},
  isbn = {978-1-4503-5525-4},
  keywords = {projectional editing},
  langid = {english}
}

@online{SupportCustomEditors,
  ids = {SupportCustomEditorsa},
  title = {Support for Custom Editors Registered via File Extensions · {{Issue}} \#5604 · Microsoft/Vscode},
  url = {https://github.com/microsoft/vscode/issues/5604},
  urldate = {2020-09-29},
  abstract = {Similar to Visual Studio extensions, I would like to register a specific file extension and swap out the code editor for a custom UI experience when that file opened.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\ID8X6XNI\\5604.html;C\:\\Users\\krire\\Zotero\\storage\\RU3I8R32\\5604.html},
  keywords = {vscode},
  langid = {english},
  organization = {{GitHub}}
}

@online{svenefftingeOpenVSX2020,
  title = {Open {{VSX}}},
  author = {{Sven Efftinge} and {Miro Spönemann}},
  date = {2020-04-09},
  url = {https://www.gitpod.io/blog/open-vsx/},
  urldate = {2020-12-06},
  abstract = {VS Code is used by more than 50\% of all developers worldwide. Its extension protocol enabled the broader developer community to create over…},
  file = {C\:\\Users\\krire\\Zotero\\storage\\CXBN22TC\\open-vsx.html},
  keywords = {extension,gitpod,open-vsx,vsx},
  langid = {english}
}

@online{svenefftingeVSCodeExtensions2020,
  title = {{{VS Code Extensions}}},
  author = {{Sven Efftinge} and {Jan Keromnes}},
  date = {2020-06-14},
  url = {https://www.gitpod.io/docs/vscode-extensions/#where-do-i-find-extensions},
  urldate = {2020-10-31},
  abstract = {Documentation site for Gitpod.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\S35NPNJQ\\vscode-extensions.html},
  keywords = {extension,gitpod,install,theia},
  langid = {english}
}

@software{tobiasortmayrEclipseglspGlsp2020,
  title = {Eclipse-Glsp/Glsp},
  author = {{Tobias Ortmayr} and {Philip Langer} and {Martin Fleck} and {Eugen Neufeld}},
  date = {2020-12-01},
  origdate = {2019-10-31T15:14:15Z},
  url = {https://github.com/eclipse-glsp/glsp},
  urldate = {2020-12-07},
  abstract = {Graphical language server platform for building web-based diagram editors},
  keywords = {diagram,diagram-editors,glsp,graphical-models,lsp,lsp-server,protocol,sprotty,theia,theia-extension},
  organization = {{eclipse-glsp}},
  version = {7f40886}
}

@incollection{tremblayUseFocusGroups2010,
  title = {The {{Use}} of {{Focus Groups}} in {{Design Science Research}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Tremblay, Monica Chiarini and Hevner, Alan R. and Berndt, Donald J.},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {121--143},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_10},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_10},
  urldate = {2021-02-16},
  abstract = {Focus groups to investigate new ideas are widely used in many research fields. The use of focus groups in design science research poses interesting opportunities and challenges. Traditional focus group methods must be adapted to meet two specific goals of design research. For the evaluation of an artifact design, exploratory focus groups (EFGs) study the artifact to propose improvements in the design. The results of the evaluation are used to refine the design and the cycle of build and evaluate using EFGs continues until the artifact is released for field test in the application environment. Then, the field test of the design artifact may employ confirmatory focus groups (CFGs) to establish the utility of the artifact in field use. Rigorous investigation of the artifact requires multiple CFGs to be run with opportunities for quantitative and qualitative data collection and analyses across the multiple CFGs. In this chapter, we discuss the adaptation of focus groups to design science research projects. We demonstrate the use of both EFGs and CFGs in a design research doctoral thesis in the health-care field.},
  isbn = {978-1-4419-5653-8},
  keywords = {Data Analytic Strategy,Design Artifact,Design Science Research,Focus Group,Focus Group Participant},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}

@online{typefoxArchitectureOverview,
  title = {Architecture {{Overview}}},
  author = {{Typefox}},
  url = {https://theia-ide.org/docs/architecture},
  urldate = {2020-12-06},
  file = {C\:\\Users\\krire\\Zotero\\storage\\P9W8ZKQZ\\architecture.html},
  keywords = {architecture,theia}
}

@online{typefoxAuthoringTheiaExtensions,
  title = {Authoring {{Theia Extensions}}},
  author = {{Typefox}},
  url = {https://theia-ide.org/docs/authoring_extensions},
  urldate = {2020-12-06},
  file = {C\:\\Users\\krire\\Zotero\\storage\\H7I2UT8Q\\authoring_extensions.html},
  keywords = {extension,theia}
}

@online{typefoxAuthoringTheiaExtensions2020,
  title = {Authoring {{Theia Extensions}}},
  author = {{Typefox}},
  date = {2020},
  url = {https://theia-ide.org/docs/authoring_extensions/},
  urldate = {2020-10-06},
  file = {C\:\\Users\\krire\\Zotero\\storage\\954CEUTM\\authoring_extensions.html}
}

@online{typefoxAuthoringTheiaPlugins2020,
  title = {Authoring {{Theia Plug}}-Ins},
  author = {{Typefox}},
  date = {2020},
  url = {https://theia-ide.org/docs/authoring_plugins/},
  urldate = {2020-10-30},
  file = {C\:\\Users\\krire\\Zotero\\storage\\3GXFJN78\\authoring_plugins.html},
  keywords = {extension,plugin,theia}
}

@online{typefoxTypeFoxSmartTools,
  title = {{{TypeFox}} - {{Smart Tools For Smart People}}},
  author = {Typefox},
  url = {https://www.typefox.io/},
  urldate = {2020-12-09},
  file = {C\:\\Users\\krire\\Zotero\\storage\\QLBCREP5\\www.typefox.io.html}
}

@online{typefoxVSCodeExtensions,
  title = {{{VS Code Extensions}} - {{Gitpod}}},
  author = {{Typefox}},
  url = {https://www.gitpod.io/docs/vscode-extensions/},
  urldate = {2020-10-06},
  abstract = {Documentation site for Gitpod.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\75TIXQG7\\vscode-extensions.html},
  keywords = {gitpod,theia},
  langid = {english},
  organization = {{VS Code Extensions - Gitpod}}
}

@online{vincentfugnittoConsumingBuiltinExternal2020,
  title = {Consuming {{Builtin}} and {{External VS Code Extensions}}},
  author = {{Vincent Fugnitto}},
  date = {2020-03-08},
  url = {https://github.com/eclipse-theia/theia/wiki/Consuming-Builtin-and-External-VS-Code-Extensions},
  urldate = {2020-10-30},
  abstract = {Eclipse Theia is a cloud \& desktop IDE framework implemented in TypeScript. - eclipse-theia/theia},
  file = {C\:\\Users\\krire\\Zotero\\storage\\3DM6DUG3\\Consuming-Builtin-and-External-VS-Code-Extensions.html},
  keywords = {extension,theia,vscode},
  langid = {english},
  organization = {{GitHub}}
}

@artwork{VisualStudioCode,
  title = {Visual {{Studio Code User Interface}}},
  url = {https://code.visualstudio.com/docs/getstarted/userinterface},
  urldate = {2020-12-05},
  abstract = {A quick overview of the Visual Studio Code user interface. Learn about the editor, window management, and special UI to handle source control, extension management, full text search and more.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\N45WFIZM\\userinterface.html},
  keywords = {user interface,vscode},
  langid = {english}
}

@online{Vscodejsonrpc,
  title = {Vscode-Jsonrpc},
  url = {https://www.npmjs.com/package/vscode-jsonrpc},
  urldate = {2021-03-08},
  abstract = {A json rpc implementation over streams},
  file = {C\:\\Users\\krire\\Zotero\\storage\\9BRSVSAN\\vscode-jsonrpc.html},
  keywords = {json-rpc,lsp,vscode},
  langid = {english},
  organization = {{npm}}
}

@inproceedings{walshClientagnosticHybridModel2020,
  title = {Toward Client-Agnostic Hybrid Model Editor Tools as a Service},
  booktitle = {Proceedings of the 23rd {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}: {{Companion Proceedings}}},
  author = {Walsh, Liam and Dingel, Juergen and Jahed, Karim},
  date = {2020-10-16},
  pages = {1},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3417990.3421440},
  url = {https://doi.org/10.1145/3417990.3421440},
  urldate = {2020-11-26},
  abstract = {General-purpose languages (GPLs) have reached a point where they can be easily learned with little background in computing. This has allowed them to cultivate users rapidly, and incentivized the creation of IDEs (Integrated Development Environments) and IDE tools for these languages.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\DUBCSVH6\\Walsh et al. - 2020 - Toward client-agnostic hybrid model editor tools a.pdf},
  isbn = {978-1-4503-8135-2},
  keywords = {blended,editor,EMF,glsp,graphical modeling,hybrid,lsp,LSP,theia,UML-RT,xtext},
  series = {{{MODELS}} '20}
}

@online{waynebeatonEclipseProjectHandbook2020,
  title = {Eclipse {{Project Handbook}} | {{The Eclipse Foundation}}},
  author = {{Wayne Beaton} and {Fabian Steeg} and {Denis Roy} and {Dave Carver} and {Ed Merks} and {Bjorn Freeman-Benson} and {Anne Jacko} and {Ian Skerrett} and {Mike Milinkovich} and {John Arthorne} and {Eclipse Foundation, Inc.}},
  date = {2020},
  url = {https://www.eclipse.org/projects/handbook/},
  urldate = {2021-05-20},
  abstract = {The Eclipse Foundation - home to a global community, the Eclipse IDE, Jakarta EE and over 375 open source projects, including runtimes, tools and frameworks.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\EASJXT3J\\handbook.html},
  keywords = {checklist,eclipse},
  langid = {english},
  organization = {{Eclipse Foundation Project Handbook}}
}

@inproceedings{whittleIndustrialAdoptionModelDriven2013,
  title = {Industrial {{Adoption}} of {{Model}}-{{Driven Engineering}}: {{Are}} the {{Tools Really}} the {{Problem}}?},
  shorttitle = {Industrial {{Adoption}} of {{Model}}-{{Driven Engineering}}},
  booktitle = {Model-{{Driven Engineering Languages}} and {{Systems}}},
  author = {Whittle, Jon and Hutchinson, John and Rouncefield, Mark and Burden, Håkan and Heldal, Rogardt},
  editor = {Moreira, Ana and Schätz, Bernhard and Gray, Jeff and Vallecillo, Antonio and Clarke, Peter},
  date = {2013},
  pages = {1--17},
  publisher = {{Springer}},
  location = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-41533-3_1},
  abstract = {An oft-cited reason for lack of adoption of model-driven engineering (MDE) is poor tool support. However, studies have shown that adoption problems are as much to do with social and organizational factors as with tooling issues. This paper discusses the impact of tools on MDE adoption and places tooling within a broader organizational context. The paper revisits previous data on MDE adoption (19 in-depth interviews with MDE practitioners) and re-analyzes the data through the specific lens of MDE tools. In addition, the paper presents new data (20 new interviews in two specific companies) and analyzes it through the same lens. The key contribution of the paper is a taxonomy of tool-related considerations, based on industry data, which can be used to reflect on the tooling landscape as well as inform future research on MDE tools.},
  file = {C\:\\Users\\krire\\Zotero\\storage\\ND55G7ZX\\Whittle et al. - 2013 - Industrial Adoption of Model-Driven Engineering A.pdf},
  isbn = {978-3-642-41533-3},
  keywords = {adoption,model-driven engineering,modeling tools,organizational change},
  langid = {english},
  series = {Lecture {{Notes}} in {{Computer Science}}}
}

@incollection{williamsDesignEmergingDigital2010,
  title = {Design of {{Emerging Digital Services}}: {{A Taxonomy}}},
  shorttitle = {Design of {{Emerging Digital Services}}},
  booktitle = {Design {{Research}} in {{Information Systems}}: {{Theory}} and {{Practice}}},
  author = {Williams, Kevin and Chatterjee, Samir and Rossi, Matti},
  editor = {Hevner, Alan and Chatterjee, Samir},
  date = {2010},
  pages = {235--253},
  publisher = {{Springer US}},
  location = {{Boston, MA}},
  doi = {10.1007/978-1-4419-5653-8_16},
  url = {https://doi.org/10.1007/978-1-4419-5653-8_16},
  urldate = {2021-02-16},
  abstract = {There has been a gigantic shift from a product-based economy to one based on services, specifically digital services. From every indication it is likely to be more than a passing fad and the changes these emerging digital services represent will continue to transform commerce and have yet to reach market saturation. Digital services are being designed for and offered to users, yet very little is known about the design process that goes behind these developments. Is there a science behind designing digital services? By examining 13 leading digital services, we have developed a design taxonomy to be able to classify and contrast digital services. What emerged in the taxonomy were two broad dimensions: a set of fundamental design objectives and a set of fundamental service provider objectives. This chapter concludes with an application of the proposed taxonomy to three leading digital services. We hope that the proposed taxonomy will be useful in understanding the science behind the design of digital services.},
  isbn = {978-1-4419-5653-8},
  keywords = {Business Objective,Revenue Sharing,Service Provider,Service User,Social Networking Site},
  langid = {english},
  series = {Integrated {{Series}} in {{Information Systems}}}
}


